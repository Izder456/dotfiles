#+TITLE: Iz's OpenBSD Dotfiles
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, emacs, doom-emacs, XenoDM, OpenBSD, stumpwm, elisp, lisp, perl, Rex, dotfiles, izder
#+LANGUAGE: en
#+PROPERTY: header-args: :tangle ~/.dotfiles :mkdirp t

- Mainly for personal backups, but if you want them, feel free to use them.

- I won't provide support for any issues on your machine, as this is a pet project.

** Shameless Unixporn for internet points.

#+html: <p align="center"><img width=700 src="assets/XenoDM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/StumpWM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/Emacs.png" /></p>

** Crucial Information

- While /there *is*/ a setup script in this project, =it's not meant to be plug-and-play=. /It's a bare-bones setup/ that is fairly non-portable and will require some tinkering to work perfectly. I don't see this as a problem because I'm comfortable customizing it to my needs.

** Setup
*** InitScript

Init KSH Script

#+BEGIN_SRC sh :tangle setup.ksh
#!/bin/ksh

typeset -r SLEEPTIME=2

REVON=$(tput smso)  # Reverse on.
REVOFF=$(tput rmso) # Reverse off.

function clean
{
  echo "$REVON Removing Cruft... $REVOFF"
  rex remove_default_cruft
}

function ensure_hard
{
  echo "$REVON We will install p5-rex & git from ports now! $REVOFF"
  doas pkg_add -vm p5-Rex git
}

function ports_deps
{
  echo "$REVON We will install port deps now! $REVOFF"
  doas pkg_add -vvvvm -l ~/.pkglist
}

function cargo_deps
{
  doas pkg_add rust
  echo "$REVON We will install cargo deps now! $REVOFF"
  xargs cargo install < ~/.cargolist
}

function config_install
{
  ensure_hard
  echo "$REVON Cloning/Installing Dots... $REVOFF"
  if [[ ! -d "${HOME}/.dotfiles" ]]; then
    git clone --depth 1 --recurse-submodules "https://github.com/Izder456/dotfiles.git" "${HOME}/.dotfiles"
  elif [[ -d "${HOME}/.dotfiles" ]]; then
    echo "Already here"
  else # something got fucked
    echo "Dots brokey"
    exit 1
  fi
  "${HOME}/.dotfiles/bin/dfm" install
  doas cp ~/.dotfiles/doas.conf /etc/doas.conf
}

function setup_shell
{
  ensure_hard
  echo "$REVON Setting up FiZSH... $REVOFF"
  rex configure_default_shell
  rex compile_afetch
}

function setup_backgrounds
{
  ensure_hard
  echo "$REVON Installing Backgrounds... $REVOFF"
  rex install_backgrounds
}

function setup_emacs
{
  ensure_hard
  echo "$REVON Setting up Emacs... $REVOFF"
  rex configure_emacs
}

function setup_stumpwm
{
  ensure_hard
  echo "$REVON Setting up StumpWM... $REVOFF"
  rex update_or_clone_stumpwm
}

function setup_misc
{
  ensure_hard
  setup_shell
  echo  "$REVON Misc setup... $REVOFF"
  rex compile_shuf
  rex compile_slock
  rex compile_st
  rex compile_surf
  rex setup_apmd
  rex update_xdg_user_dirs
}

function setup_xenodm
{
  ensure_hard
  echo "$REVON Setting up XenoDM... $REVOFF"
  rex setup_xenodm
}

while :
do
  clear
  print "\t    $REVON Srcerizder's Dotfiles Setup $REVOFF"
  print
  print
  print "\tOptions:"
  print "\t---------------------------------------------"
  print "\t1) Ports Deps     4) StumpWM"
  print "\t2) Cargo Deps     5) Emacs"
  print "\t3) Install Config 6) XenoDM"
  print "\t7) Misc           8) Clean"
  print
  print "\n\tOther Options:"
  print "\t----------------"
  print "\ta) All (Reccomended)"
  print "\tr) Reload Menu"
  print "\tq) Quit"
  print
  print "\tEnter your selection: r\b\c"
  read selection
  if [[ -z "$selection" ]]
    then selection=r
  fi

  case $selection in
      1)  print "\nSelected Ports Deps..."
          sleep $SLEEPTIME
          ports_deps
          ;;
      2)  print "Selected Cargo Deps..."
          sleep $SLEEPTIME
          cargo_deps
          ;;
      3)  print "Selected Install Configs..."
          sleep $SLEEPTIME
          config_install
          ;;
      4)  print "Selected StumpWM Config..."
          sleep $SLEEPTIME
          setup_stumpwm
          ;;
      5)  print "Selected Emacs Config..."
          sleep $SLEEPTIME
          setup_emacs
          ;;
      6)  print "Selected XenoDM Config..."
          sleep $SLEEPTIME
          setup_xenodm
          ;;
      7)  print "Selected Misc..."
          sleep $SLEEPTIME
          setup_misc
          ;;
      8)  print "Selected Clean..."
          sleep $SLEEPTIME
          clean
          ;;
    a|A)  print "Running All..."
          sleep $SLEEPTIME
          clean
          ports_deps
          cargo_deps
          config_install
          setup_stumpwm
          setup_emacs
          setup_xenodm
          setup_misc
          ;;
    r|R)  continue
          ;;
    q|Q)  print
          exit
          ;;
      ,*)  print "\n$REVON Invalid selection $REVOFF"
          sleep 1
          ;;
  esac
done
#+END_SRC

**** CARGOLIST

Cargo Package List

#+BEGIN_SRC txt :tangle .cargolist
cargo-update-installed du-dust hyperfine onefetch sd tere tokei
#+END_SRC

*** Rexfile
**** Perl-Boilerplate

Set up "subroutines" in perl, That I'll use later.

#+BEGIN_SRC perl :tangle Rexfile
use 5.36.0;
use Rex -feature => ['1.4'];

# Set PATH explicitly
$ENV{'PATH'} =
'/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:$HOME/bin';

# No Magic
our $USERHOME = "$ENV{HOME}";
our $GITHUB   = "https://github.com";
#+END_SRC

**** Remove-Cruft

I don't need some of these defaults

#+BEGIN_SRC perl :tangle Rexfile
# task to clean home dir
task 'remove_default_cruft', sub {
  unlink(
      "$USERHOME/.cshrc",   "$USERHOME/.login",     "$USERHOME/.mailrc",
      "$USERHOME/.profile", "$USERHOME/.Xdefaults", "$USERHOME/.cvsrc"
  );
  system( 'doas', 'chmod', '0700', "$USERHOME" );
};
#+END_SRC

**** Dots-Install

+ dfm install script config

#+BEGIN_SRC txt :tangle .dfminstall
.fonts recurse
.git recurse
.icons recurse
.themes recurse
.moc recurse
.config recurse
.local recurse
LICENSE.txt skip
README.org skip
doas.conf skip
setup.ksh skip
setup.pl.bak skip
bin skip
assets skip
backgrounds skip
Emacs-Config skip
StumpWM-Config skip
XenoDM-Config skip
APM-Config skip
README.org skip
#+END_SRC

**** FiZSH-Setup

This is a zsh frontend, that emulates the functionality of fish

#+BEGIN_SRC perl :tangle Rexfile
# Configures and sets up the default shell
task 'configure_default_shell', sub {
  my %plugins = (
      "zsh-openbsd" => "$GITHUB/sizeofvoid/openbsd-zsh-completions.git",
      "zsh-fzf"     => "$GITHUB/Aloxaf/fzf-tab.git",
      "zsh-suggest" => "$GITHUB/zsh-users/zsh-autosuggestions.git",
      "zsh-256"     => "$GITHUB/chrissicool/zsh-256color.git",
      "zsh-fsh"     => "$GITHUB/zdharma-continuum/fast-syntax-highlighting.git"
  );
  keys %plugins;
  while(my($k, $v) = each %plugins) {
    my $clonedir = "$USERHOME/.$k";
    my $cloneuri = "$v";
    if ( -d $clonedir ) {
      chdir "$clonedir";
      system( 'git', 'pull' );
    }
    else {
      system( 'git',       'clone',
              "$cloneuri", "$clonedir" );
    }
  }

  # Grab fizsh src setup
  if ( -d "$USERHOME/.fizsh" ) {
    chdir "$USERHOME/.fizsh";
  }
  else {
    system( 'git',                         'clone',
            "$GITHUB/zsh-users/fizsh.git", "$USERHOME/.fizsh" );
    chdir "$USERHOME/.fizsh";
  }
  system( './configure' );
  system( 'make' );
  system( 'doas', 'make',                       'install' );
  system( 'cp', "$USERHOME/.dotfiles/.fizshrc", "$USERHOME/.fizsh/.fizshrc" );
  system( 'chsh', '-s',                         '/usr/local/bin/fizsh' );
};
#+END_SRC

**** Emacs-Setup

I use Emacs, btw

#+BEGIN_SRC perl :tangle Rexfile
# Configures and installs emacs
task 'configure_emacs', sub {
  if ( -d "$USERHOME/.emacs.d" ) {
    chdir "$USERHOME/.emacs.d";
  } else {
    system( 'ln',                               '-sf',
            "$USERHOME/.dotfiles/Emacs-Config", "$USERHOME/.emacs.d" );
  }
};
#+END_SRC

**** StumpWM-Setup

Yeah, this weird WM...

#+BEGIN_SRC perl :tangle Rexfile
task 'update_or_clone_stumpwm', sub {
  if ( -d "$USERHOME/.stumpwm.d" ) {
      chdir "$USERHOME/.stumpwm.d";
  }
  else {
      system( 'ln',                                 '-sf',
              "$USERHOME/.dotfiles/StumpWM-Config", "$USERHOME/.stumpwm.d" );
  }
};
#+END_SRC

**** XenoDM/Background-Setup

Because XDM wasn't cutting it...

#+BEGIN_SRC perl :tangle Rexfile
# Installs backgrounds to /usr/local/share/backgrounds
task 'install_backgrounds', sub {
  system( 'doas', 'mkdir', '-p', '/usr/local/share/backgrounds' );
  system( 'doas',
          'cp',                                      '-rvf',
          glob("$USERHOME/.dotfiles/backgrounds/*"), '/usr/local/share/backgrounds' );
};

# Sets up Xenodm configuration
task 'setup_xenodm', sub {
  system( 'doas',
          'cp',                                        '-rvf',
          glob("$USERHOME/.dotfiles/XenoDM-Config/*"), '/etc/X11/xenodm/' );
};
#+END_SRC

**** APMD_AutoHook-Lock

Setup Laptop Slock shell-close autohook

#+BEGIN_SRC perl :tangle Rexfile
task 'setup_apmd', sub {
  system( 'doas', 'mkdir', '/etc/apm' );
  system( 'doas', 'cp', '-rvf',
          glob("$USERHOME/.dotfiles/APM-Config/*"), '/etc/apm/' );
};
#+END_SRC

**** Extra-Packages

Extra stuff thats not in ports, cargo or base

#+BEGIN_SRC perl :tangle Rexfile
# Compiles shuf re-implementation
task 'compile_shuf', sub {
  system( 'git',                    'clone',
          "$GITHUB/ibara/shuf.git", "$USERHOME/.shuf" );
  chdir "$USERHOME/.shuf";
  system( './configure' );
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my Slock Setup
task 'compile_slock', sub {
  system( 'git',                        'clone',
          "$GITHUB/Izder456/slock.git", "$USERHOME/.slock" );
  chdir "$USERHOME/.slock";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my SURF Setup
task 'compile_surf', sub {
  system( 'git',                       'clone',
          "$GITHUB/Izder456/surf.git", "$USERHOME/.surf-src" );
  chdir "$USERHOME/.surf-src";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my ST Setup
task 'compile_st', sub {
  system( 'git',                     'clone',
          "$GITHUB/Izder456/st.git", "$USERHOME/.st" );
  chdir "$USERHOME/.st";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles afetch
task 'compile_afetch', sub {
  system( 'git',                      'clone',
          "$GITHUB/13-CF/afetch.git", "$USERHOME/.afetch" );
  chdir "$USERHOME/.afetch";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};
#+END_SRC

**** Xdg-UserDirs

Setup Homedir Paths

#+BEGIN_SRC perl :tangle Rexfile
# Updates XDG user directories
task 'update_xdg_user_dirs', sub {
  system( 'xdg-user-dirs-update' );
  system( 'mkdir', "$USERHOME/Projects" );
  system( 'doas', 'gdk-pixbuf-query-loaders', '--update-cache' );
};
#+END_SRC

** Setup Script

*** Do as user:

#+BEGIN_SRC
$ ftp -o ./setup.ksh $GITHUB/izder456/dotfiles/raw/main/setup.ksh
$ chmod +x setup.ksh
$ ksh setup.ksh
#+END_SRC

** Note:

- My script doesn't perform any performance tweaking. Users should refer to [[https://openbsd.org/faq][the FAQ]], [[https://man.openbsd.org][manpages]], or the unofficial [[https://www.openbsdhandbook.com][OpenBSD Handbook]] for that.

- for laptops, I /highly recommend/ solene%'s power management daemon [[https://dataswamp.org/~solene/2022-03-21-openbsd-cool-frequency.html][obsdfreqd]]

- When the script installs dependencies, always choose the latest version when given a version choice from ~pkg_add~, except for Emacs, where you should choose the gtk2 variant.

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- Use with caution.
