* Iz's OpenBSD Dotfiles

- Mainly for personal backups, but if you want them, feel free to use them.

- I won't provide support for any issues on your machine, as this is a pet project.

** Shameless Unixporn for internet points.

#+html: <p align="center"><img width=700 src="assets/XenoDM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/StumpWM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/Emacs.png" /></p>

** Crucial Information

- While /there *is*/ a setup script in this project, =it's not meant to be plug-and-play=. /It's a bare-bones setup/ that is fairly non-portable and will require some tinkering to work perfectly. I don't see this as a problem because I'm comfortable customizing it to my needs.

** Setup
*** InitScript

Init KSH Script

#+BEGIN_SRC sh :tangle setup.ksh
#!/bin/ksh
echo "We will install p5-rex & git from ports now!"
echo "Press ENTER to continue:"
read
doas pkg_add p5-Rex git
echo "Cloning/Installing Dots..."
if [[ ! -d "${HOME}/.dotfiles" ]]; then
    git clone --depth 1 --recurse-submodules https://github.com/Izder456/dotfiles $HOME/.dotfiles
elif [[ -d "${HOME}/.dotfiles" ]]; then
    git pull --depth 1 --recurse-submodules
else # something got fucked
    echo "Dots brokey"
    exit 1
fi
${HOME}/.dotfiles/bin/dfm install
doas cp ~/.dotfiles/doas.conf /etc/doas.conf
echo "Setting up Ports..."
echo "Press ENTER to continue:"
read
doas pkg_add -l ~/.pkglist
echo "Setting up Cargo-Packages..."
echo "Press ENTER to continue:"
read
cargo install $(cat ~/.cargolist)
echo "We will run the Rexfile now!"
echo "Press ENTER to continue:"
read
echo "Removing Cruft..."
rex remove_default_cruft
echo "Setting up FiZSH..."
rex configure_default_shell
echo "Setting up DOOM Emacs..."
rex configure_doom_emacs
echo "Setting up StumpWM..."
rex update_or_clone_stumpwm
echo "Installing Backgrounds..."
rex install_backgrounds
echo "Setting up XenoDM..."
rex setup_xenodm
echo "Setting up APMD..."
rex setup_apmd
echo "Setting up extras..."
rex compile_shuf
rex compile_slock
rex compile_st
rex compile_surf
rex compile_afetch
rex setup_battstat
echo "XDG-User-Dirs-Setup"
rex update_xdg_user_dirs
echo "DONE!"
#+END_SRC

*** PackageLists

These are my packge list files

**** PKGLIST

Ports List

#+BEGIN_SRC txt :tangle .pkglist
ImageMagick--
alacritty--
aria2--
armagetronad--
audacity--
autoconf--%2.71
automake--%1.16
avahi--
bash--
bat--
bison--
blockgame--
boehm-gc--
boost--
borgbackup--%1.2
caja--
caja-extensions--
chicken--
clang-tools-extra--
clisp--
clojure--
cmake--
cmatrix--
cmixer--
coreutils--
cpuid--
curl--
dbus--
deadbeef--
desktop-file-utils--
desmume--
dhewm3--
dolphin--
dunst--
editorconfig-core-c--
ee--
emacs--gtk2%emacs
fceux--
fd--
fdupes--
feh--
ffmpeg--
fftw--
fftw3--
fltk--
fluidsynth--
fmt--
freefont-ttf--
fsharp--
fzf--
g++--%8
gawk--
gcc--%8
gd--
gettext-runtime--
gettext-tools--
gforth--
ggrep--
gimp--%snapshot
git--
github-cli--
glade--
glfw--
glib2--
glslang--
gmake--
gmp--
gnupg--
go--
go-tools--
groff--
gtk+4--
gtk2-murrine-engine--
gtk2mm--
gzdoom--
harfbuzz--
htop--
hw-probe--
i2pd--
iftop--
iniparser--
inkscape--
intltool--
isync--
jack--
jdk--%1.8
jdk--%11
jdk--%17
jq--
json-glib--
lame--
leafpad--
leiningen--
libarchive--
libcanberra--
libcanberra-gtk3--
liberation-fonts--
libevent--
libglade2--
libiconv--
libinotify--
liblo--
libotr--
libpurple--
libqalculate--
libqrencode--
libsamplerate--
libsndfile--
libstatgrab--
libtool--
libusb-compat--
libvorbis--
libyaml--
links--
llvm--%13
lmms--
lsblk--
lua--%5.4
luajit--
lwjgl--
lwjgl3--
lxappearance--
lynx--
m4--
mercurial--
meson--
mgba--
mgba-qt--
minetest--
moc--
mono--
most--
motif--
mplus-fonts--
mpv--
msmtp--
mu--
musescore--
musikcube--
mxml--
nano--
ncdu--
neofetch--
neovim--
nestopia--
node--
noto-emoji--
noto-nerd-fonts--
nss--
obsdfreqd--
openal--
openmw--
openssl--%1.1
openssl--%3.0
openssl--%3.1
p5-List-MoreUtils--
p5-XML-Parser--
p7zip--
password-store--
pcre--
php--%8.1
picom--
pidgin--
pidgin-libnotify--
pidgin-otr--
pidgin-window-merge--
pkgconf--
pkglocatedb--
portaudio-svn--
portslist--
pv--
py3-isort--
py3-pandas--
py3-pip--
py3-pipx--
py3-pytest-subtests--
py3-test-isort--
python--%3.11
quirks--
ripgrep--
rofi--
ruby--%3.2
rust--
sbcl--
screen--shm
screenkey--
scrot--
sdl2--
sdl2-gfx--
sdl2-image--
sdl2-net--
sdl2-pango--
sdl2-ttf--
shared-mime-info--
shellcheck--
shfmt--
snes9x--
speedtest-cli--
spleen--
ssh-copy-id--
sshfs-fuse--
stumpwm--
subversion--
supertux--
supertuxkart--
texinfo--
thunderbird--
tidy--
tor--
tree--
ungoogled-chromium--
unifont--
upower--
urlview--slang
vlc--
vulkan-headers--
vulkan-loader--
vulkan-tools--
vulkan-validation-layers--
wget--
wireguard-tools--
xarchiver--
xclip--
xdg-user-dirs--
xdg-utils--
xz--
yt-dlp--
zsh--
#+END_SRC

**** CARGOLIST

Cargo Package List

#+BEGIN_SRC txt :tangle .cargolist
cargo-update-installed du-dust eza hyperfine onefetch oxipng sd tere tokei
#+END_SRC

*** Rexfile
**** Perl-Boilerplate

Set up "subroutines" in perl, That I'll use later.

#+BEGIN_SRC perl :tangle Rexfile
use 5.36.0;
use Rex -feature => ['1.4'];

# Set PATH explicitly
$ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:$HOME/bin';
#+END_SRC

**** Remove-Cruft

I don't need some of these defaults

#+BEGIN_SRC perl :tangle Rexfile
# task to clean home dir
task 'remove_default_cruft', sub {
  unlink(
    "$ENV{HOME}/.cshrc",
    "$ENV{HOME}/.login",
    "$ENV{HOME}/.mailrc",
    "$ENV{HOME}/.profile",
    "$ENV{HOME}/.Xdefaults",
    "$ENV{HOME}/.cvsrc"
  );
  system('doas', 'chmod', '0700', "$ENV{'HOME'}");
};
#+END_SRC

**** Dots-Install

+ dfm install script config

#+BEGIN_SRC txt :tangle .dfminstall
.fonts recurse
.git recurse
.icons recurse
.themes recurse
.moc recurse
.config recurse
.local recurse
LICENSE.txt skip
README.org skip
doas.conf skip
setup.ksh skip
setup.pl.bak skip
bin skip
assets skip
backgrounds skip
Emacs-Config skip
StumpWM-Config skip
XenoDM-Config skip
APM-Config skip
README.org skip
#+END_SRC

**** FiZSH-Setup

This is a zsh frontend, that emulates the functionality of fish

#+BEGIN_SRC perl :tangle Rexfile
# Configures and sets up the default shell
task 'configure_default_shell', sub {
  say "We will install FiZSH now!";
  say "Press ENTER to continue:";
  <STDIN>;
  # Grab openbsd autocompletes
  if (-d "$ENV{HOME}/.zsh-openbsd") {
    chdir("$ENV{HOME}/.zsh-openbsd");
    system('git', 'pull');
  } else {
    system('git', 'clone', 'https://github.com/sizeofvoid/openbsd-zsh-completions.git', "$ENV{HOME}/.zsh-openbsd");
  }
  # Grab fzf tabcompletes
  if (-d "$ENV{HOME}/.zsh-fzf") {
    chdir("$ENV{HOME}/.zsh-fzf");
    system('git', 'pull');
  } else {
    system('git', 'clone', 'https://github.com/Aloxaf/fzf-tab.git', "$ENV{HOME}/.zsh-fzf");
  }
  # Zsh-Autosuggestions
  if (-d "$ENV{HOME}/.zsh-suggest") {
    chdir("$ENV{HOME}/.zsh-suggest");
    system('git', 'pull');
  } else {
    system('git', 'clone', 'https://github.com/zsh-users/zsh-autosuggestions.git', "$ENV{HOME}/.zsh-suggest");
  }
  # Zsh-256
  if (-d "$ENV{HOME}/.zsh-256") {
    chdir("$ENV{HOME}/.zsh-256");
    system('git', 'pull');
  } else {
    system('git', 'clone', 'https://github.com/chrissicool/zsh-256color.git', "$ENV{HOME}/.zsh-256");
  }
  # Zsh-Syntax-Highlight
  if (-d "$ENV{HOME}/.zsh-fsr") {
    chdir("$ENV{HOME}/.zsh-fsr");
    system('git', 'pull');
  } else {
    system('git', 'clone', 'https://github.com/zdharma-continuum/fast-syntax-highlighting.git', "$ENV{HOME}/.zsh-fsr");
  }
  # Grab fizsh src setup
  if (-d "$ENV{HOME}/.fizsh") {
    chdir "$ENV{HOME}/.fizsh";
  } else {
    system('git', 'clone', 'https://github.com/zsh-users/fizsh.git', "$ENV{HOME}/.fizsh");
    chdir "$ENV{HOME}/.fizsh";
  }
  system('./configure');
  system('make');
  system('doas', 'make', 'install');
  system('cp', "$ENV{HOME}/.dotfiles/.fizshrc", "$ENV{HOME}/.fizsh/.fizshrc");
  system('chsh', '-s', '/usr/local/bin/fizsh');
};
#+END_SRC

**** Emacs-Setup

I use Emacs, btw

#+BEGIN_SRC perl :tangle Rexfile
# Configures and installs doom emacs
task 'configure_doom_emacs', sub {
  say "We will install Doom-Emacs now!";
  say "Press ENTER to continue:";
  <STDIN>;
  if (-d "$ENV{HOME}/.emacs.d") {
    chdir "$ENV{HOME}/.emacs.d";
  } else {
    system('git', 'clone', '--depth', '1', 'https://github.com/hlissner/doom-emacs.git', "$ENV{HOME}/.emacs.d/");
    chdir "$ENV{HOME}/.emacs.d";
  }
  system("$ENV{HOME}/.emacs.d/bin/doom", 'install', '--config', '--env', '--fonts');
  if (-d "$ENV{HOME}/.doom.d") {
    system('rm', '-rvf', "$ENV{HOME}/.doom.d");
  }
  system('ln', '-sf', "$ENV{HOME}/.dotfiles/Emacs-Config", "$ENV{HOME}/.doom.d");
  system("$ENV{HOME}/.emacs.d/bin/doom", 'sync');
};
#+END_SRC

**** StumpWM-Setup

Yeah, this weird WM...

#+BEGIN_SRC perl :tangle Rexfile
task 'update_or_clone_stumpwm', sub {
  say "We will set up StumpWM now!";
  say "Press ENTER to continue:";
  <STDIN>;
  if (-d "$ENV{HOME}/.stumpwm.d") {
    chdir "$ENV{HOME}/.stumpwm.d";
  } else {
    system('ln', '-sf', "$ENV{HOME}/.dotfiles/StumpWM-Config", "$ENV{HOME}/.stumpwm.d");
  };
};
#+END_SRC

**** XenoDM/Background-Setup

Because XDM wasn't cutting it...

#+BEGIN_SRC perl :tangle Rexfile
# Installs backgrounds to /usr/local/share/backgrounds
task 'install_backgrounds', sub {
  say "We will install backgrounds now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'mkdir', '-p', '/usr/local/share/backgrounds');
  system('doas', 'cp', '-rvf', glob("$ENV{HOME}/.dotfiles/backgrounds/*"), '/usr/local/share/backgrounds');
};

# Sets up Xenodm configuration
task 'setup_xenodm', sub {
  say "We will set up XenoDM now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'cp', '-rvf', glob("$ENV{HOME}/.dotfiles/XenoDM-Config/*"), '/etc/X11/xenodm/');
};
#+END_SRC

**** APMD_AutoHook-Lock

Setup Laptop Slock shell-close autohook

#+BEGIN_SRC perl :tangle Rexfile
task 'setup_apmd', sub {
  say "We will set up APM-Autohook now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'mkdir', '/etc/apm');
  system('doas', 'cp', '-rvf', glob("$ENV{HOME}/.dotfiles/APM-Config/*"), '/etc/apm/');
};
#+END_SRC

**** Extra-Packages

Extra stuff thats not in ports, cargo or base

#+BEGIN_SRC perl :tangle Rexfile
# Compiles shuf re-implementation
task 'compile_shuf', sub {
  say "We will compile shuf now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/ibara/shuf.git', "$ENV{HOME}/.shuf");
  chdir "$ENV{HOME}/.shuf";
  system('./configure');
  system('make');
  system('doas', 'make', 'install');
};

# Compiles in my Slock Setup
task 'compile_slock', sub {
  say "We will compile suckless lock now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/Izder456/slock.git', "$ENV{HOME}/.slock");
  chdir "$ENV{HOME}/.slock";
  system('make');
  system('doas', 'make', 'install');
};


# Compiles in my SURF Setup
task 'compile_surf', sub {
  say "We will compile suckless surf now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/Izder456/surf.git', "$ENV{HOME}/.surf-src");
  chdir "$ENV{HOME}/.surf-src";
  system('make');
  system('doas', 'make', 'install');
};


# Compiles in my ST Setup
task 'compile_st', sub {
  say "We will compile suckless term now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/Izder456/st.git', "$ENV{HOME}/.st");
  chdir "$ENV{HOME}/.st";
  system('make');
  system('doas', 'make', 'install');
};

# Compiles afetch
task 'compile_afetch', sub {
  say "We will compile afetch now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/13-CF/afetch.git', "$ENV{HOME}/.afetch");
  chdir "$ENV{HOME}/.afetch";
  system('make');
  system('doas', 'make', 'install');
};

# Setup Battery Monitor
task 'setup_battstat', sub {
  say "We will set up battery monitor now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/imwally/battstat.git', "$ENV{HOME}/.battstat");
  chdir "$ENV{HOME}/.battstat";
  system('doas', 'install', './battstat', '/usr/local/bin');
};

#+END_SRC

**** Xdg-UserDirs

Setup Homedir Paths

#+BEGIN_SRC perl :tangle Rexfile
# Updates XDG user directories
task 'update_xdg_user_dirs', sub {
  say "We will set xdg-user-dirs now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('xdg-user-dirs-update');
  system('mkdir', "$ENV{HOME}/Projects");
};
#+END_SRC

** Setup Script

*** Do as user:

#+BEGIN_SRC
$ ftp -o ./setup.ksh https://github.com/izder456/dotfiles/raw/main/setup.ksh
$ chmod +x setup.ksh
$ ./setup.ksh
#+END_SRC

** Note:

- My script doesn't perform any performance tweaking. Users should refer to [[https://openbsd.org/faq][the FAQ]], [[https://man.openbsd.org][manpages]], or the unofficial [[https://www.openbsdhandbook.com][OpenBSD Handbook]] for that.

- for laptops, I /highly recommend/ solene%'s power management daemon [[https://dataswamp.org/~solene/2022-03-21-openbsd-cool-frequency.html][obsdfreqd]]

- When the script installs dependencies, always choose the latest version when given a version choice from ~pkg_add~, except for Emacs, where you should choose the gtk2 variant.

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- Use with caution.
