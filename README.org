* Iz's OpenBSD Dotfiles

- Mainly for personal backups, but if you want them, feel free to use them.

- I won't provide support for any issues on your machine, as this is a pet project.

** Shameless Unixporn for internet points.

#+html: <p align="center"><img width=700 src="assets/XenoDM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/StumpWM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/Emacs.png" /></p>

** Crucial Information

- While /there *is*/ a setup script in this project, =it's not meant to be plug-and-play=. /It's a bare-bones setup/ that is fairly non-portable and will require some tinkering to work perfectly. I don't see this as a problem because I'm comfortable customizing it to my needs.

- +It's highly encouraged that you read the PERL script before following the [[#setup-script][Setup]] instructions. But for brevity:+ *scratch that*, you /will/ read it now:

*** =Boilerplate-Perl=

#+BEGIN_SRC perl :tangle setup.pl
#!/usr/bin/env perl

# Ensure Perl 5.36.0 compatibility
use 5.36.0;

# Set PATH explicitly
$ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:$HOME/bin';

# Checks if a file exists
sub file_exists {
  my ($filepath) = @_;
  return -e $filepath;
}

# Downloads a file from a given URL
sub download_file {
  my ($url, $filename) = @_;
  my $status = system("ftp -o $filename $url");
  return $status == 0;
}
#+END_SRC

*** =Remove-Cruft=

#+BEGIN_SRC perl :tangle setup.pl
# Removes default OpenBSD files
sub remove_default_files {
  unlink(
    "$ENV{HOME}/.cshrc",
    "$ENV{HOME}/.login",
    "$ENV{HOME}/.mailrc",
    "$ENV{HOME}/.profile",
    "$ENV{HOME}/.Xdefaults",
    "$ENV{HOME}/.cvsrc"
  );
}

# Sets permissions for user's HOME directory
sub set_home_directory_perms {
  chmod(0700, $ENV{'HOME'});
}
#+END_SRC

*** =Handle-Packages=

#+BEGIN_SRC perl :tangle setup.pl
# Install port deps with pkg_add using `.pkglist`
sub install_ports {
  say "We will install deps now!";
  say "Press ENTER to continue:";
  <STDIN>;
  my $pkglist = ".pkglist";
  open my $info, $pkglist or die "Could not open $file: $!";
  while( my $line = <$info>)  {
    say $line;
    last if $. == 2;
  }
  close $info;
}
#+END_SRC

*** =Handle-Cargo-Packages=

#+BEGIN_SRC perl :tangle setup.pl
# Install rust programs with cargo using an array.
sub install_cargo_programs {
  say "We will install cargo deps now!";
  say "Press Enter to continue";
  <STDIN>;
  my @cargolist = ('sd', 'eza', 'tere', 'onefetch', 'tokei', 'du-dust', 'cargo-update-installed', 'tre-command', 'hyperfine');
  system('cargo', 'install', @rust_dependencies);
}
#+END_SRC

*** =Dots-Manage=

  dfm install script config

#+BEGIN_SRC :tangle .dfminstall
.fonts recurse
.git recurse
.icons recurse
.themes recurse
.moc recurse
.config recurse
.local recurse
assets skip
backgrounds skip
Emacs-Config skip
StumpWM-Config skip
XenoDM-Config skip
APM-Config skip
README.org skip
#+END_SRC

#+BEGIN_SRC perl :tangle setup.pl
# Updates dotfiles repository or clones if not present
sub update_or_clone_dotfiles {
  if (-d "$ENV{HOME}/.dotfiles") {
    chdir "$ENV{HOME}/.dotfiles";
    system('git', 'pull', '--recurse-submodules');
  } else {
    system('git', 'clone', '--recurse-submodules', '--depth', '1', 'https://github.com/izder456/dotfiles', "$ENV{HOME}/.dotfiles");
  }
}

# Upgrade/Merge/Install dotfiles
sub symlink_dots {
  say "We will install dots now!";
  say "Press ENTER to continue:";
  <STDIN>;
  update_or_clone_dotfiles();
  system('dfm', 'umi');
}
#+END_SRC

*** =FiZSH-Setup=

  This is a zsh frontend, that emulates the functionality of fish

#+BEGIN_SRC perl :tangle setup.pl
# Configures and sets up the default shell
sub configure_default_shell {
  say "We will install FiZSH now!";
  say "Press ENTER to continue:";
  <STDIN>;
  # Grab openbsd autocompletes
  if (-d "$ENV{HOME}/.zsh-openbsd") {
    system('git', 'pull');
  } else {
    system('git', 'clone', 'https://github.com/sizeofvoid/openbsd-zsh-completions.git', "$ENV{HOME}/.zsh-openbsd");
  }
  # Grab fizsh src setup
  if (-d "$ENV{HOME}/.fizsh") {
    chdir "$ENV{HOME}/.fizsh";
  } else {
    system('git', 'clone', 'https://github.com/zsh-users/fizsh.git', "$ENV{HOME}/.fizsh");
    chdir "$ENV{HOME}/.fizsh";
  }
  system('./configure');
  system('make');
  system('doas', 'make', 'install');
  system('cp', "$ENV{HOME}/.dotfiles/.fizshrc", "$ENV{HOME}/.fizsh/.fizshrc");
  system('chsh', '-s', '/usr/local/bin/fizsh');
}
#+END_SRC

*** =Emacs-Setup=

#+BEGIN_SRC perl :tangle setup.pl
# Configures and installs doom emacs
sub configure_doom_emacs {
  say "We will install Doom-Emacs now!";
  say "Press ENTER to continue:";
  <STDIN>;
  if (-d "$ENV{HOME}/.emacs.d") {
    chdir "$ENV{HOME}/.emacs.d";
  } else {
    system('git', 'clone', '--depth', '1', 'https://github.com/hlissner/doom-emacs.git', "$ENV{HOME}/.emacs.d/");
    chdir "$ENV{HOME}/.emacs.d";
  }
  system("$ENV{HOME}/.emacs.d/bin/doom", 'install', '--config', '--env', '--fonts');
  if (-d "$ENV{HOME}/.doom.d") {
    system('rm', '-rvf', "$ENV{HOME}/.doom.d");
  }
  system('ln', '-sf', '$ENV{HOME}/.dotfiles/Emacs-Config', "$ENV{HOME}/.doom.d");
  system("$ENV{HOME}/.emacs.d/bin/doom", 'sync');
}
#+END_SRC

*** =StumpWM-Setup=

#+BEGIN_SRC perl :tangle setup.pl
sub update_or_clone_stumpwm {
  say "We will set up StumpWM now!";
  say "Press ENTER to continue:";
  <STDIN>;
  if (-d "$ENV{HOME}/.stumpwm.d") {
    chdir "$ENV{HOME}/.stumpwm.d";
  } else {
    system('ln', '-sf', '$ENV{HOME}/.dotfiles/StumpWM-Config', '$ENV{HOME}/.stumpwm.d');
  }
}
#+END_SRC

*** =XenoDM/Background-Setup=

#+BEGIN_SRC perl :tangle setup.pl
# Installs backgrounds to /usr/local/share/backgrounds
sub install_backgrounds {
  say "We will install backgrounds now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'mkdir', '-p', '/usr/local/share/backgrounds');
  system('doas', 'cp', '-rvf', '$ENV{HOME}/.dotfiles/backgrounds/*', '/usr/local/share/backgrounds');
}

# Sets up Xenodm configuration
sub setup_xenodm {
  say "We will set up XenoDM now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'cp', '-rvf', '$ENV{HOME}/.dotfiles/config/*', '/etc/X11/xenodm/');
}
#+END_SRC

*** =APMD_AutoHook-Lock=

#+BEGIN_SRC perl :tangle setup.pl
sub setup_apmd {
  say "We will set up APM-Autohook now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'mkdir', '/etc/apm');
  system('doas', 'cp', '-rvf', '$ENV{HOME}/.dotfiles/APM-Config/*', '/etc/apm/');
}
#+END_SRC

*** =Extra-Packages=

#+BEGIN_SRC perl :tangle setup.pl
# Compiles shuf re-implementation
sub compile_shuf {
  say "we will compile shuf now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/ibara/shuf.git', "$ENV{HOME}/.shuf");
  chdir "$ENV{HOME}/.shuf";
  system('./configure');
  system('make');
  system('doas', 'make', 'install');
}

# Compiles in my Slock Setup
sub compile_slock {
  say "we will compile suckless lock now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/Izder456/slock.git', "$ENV{HOME}/.slock");
  chdir "$ENV{HOME}/.slock";
  system('make');
  system('doas', 'make', 'install');
}

# Compiles afetch
sub compile_afetch {
  say "we will compile afetch now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/13-CF/afetch.git', "$ENV{HOME}/.afetch");
  chdir "$ENV{HOME}/.afetch";
  system('make');
  system('doas', 'make', 'install');
}

# Setup Battery Monitor
sub setup_battstat {
  say "we will set up battery monitor now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/imwally/battstat.git', "$ENV{HOME}/.battstat");
  chdir "$ENV{HOME}/.battstat";
  system('doas', 'install', './battstat', '/usr/local/bin');
}

# Updates XDG user directories
sub update_xdg_user_dirs {
  say "we will set xdg-user-dirs now!";
  say "press enter to continue:";
  <STDIN>;
  system('xdg-user-dirs-update');
  system('mkdir', '$ENV{HOME}/Projects');
}
#+END_SRC

- My script doesn't perform any performance tweaking. Users should refer to [[https://openbsd.org/faq][the FAQ]], [[https://man.openbsd.org][manpages]], or the unofficial [[https://www.openbsdhandbook.com][OpenBSD Handbook]] for that.

- for laptops, I /highly recommend/ solene%'s power management daemon [[https://dataswamp.org/~solene/2022-03-21-openbsd-cool-frequency.html][obsdfreqd]]

** Setup Script
   - Read the [[#crucial-information][Crucial Information]] and the disclaimer.

*** Do as root:

#+BEGIN_SRC
# groupadd doas
# usermod -G doas,operator,staff [your username]
# ftp -o /etc/doas.conf https://github.com/izder456/dotfiles/raw/main/doas.conf
#+END_SRC

*** Do as user:

#+BEGIN_SRC
$ ftp -o ./setup.pl https://github.com/izder456/dotfiles/raw/main/setup.pl
$ chmod +x setup.pl
$ ./setup.pl
#+END_SRC

** Note:

- When the script installs dependencies, always choose the latest version when given a version choice from ~pkg_add~, except for Emacs, where you should choose the gtk2 variant.

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- Use with caution.
