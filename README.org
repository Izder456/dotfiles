#+TITLE: Iz's OpenBSD Dotfiles
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, emacs, doom-emacs, XenoDM, OpenBSD, stumpwm, elisp, lisp, perl, Rex, dotfiles, izder
#+LANGUAGE: en
#+PROPERTY: header-args: :tangle ~/.dotfiles :mkdirp t

- Mainly for personal backups, but if you want them, feel free to use them.

- I won't provide support for any issues on your machine, as this is a pet project.

** Shameless Unixporn for internet points.

#+html: <p align="center"><img width=700 src="assets/XenoDM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/StumpWM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/Emacs.png" /></p>

** Crucial Information

- While /there *is*/ a setup script in this project, =it's not meant to be plug-and-play=. /It's a bare-bones setup/ that is fairly non-portable and will require some tinkering to work perfectly. I don't see this as a problem because I'm comfortable customizing it to my needs.

** Setup
*** InitScript

Setup KSH Script

**** Boilerplate

set vars global

#+BEGIN_SRC sh :tangle setup.ksh
#!/bin/ksh

typeset -r SLEEPTIME=2

REVON=$(tput smso)  # Reverse on.
REVOFF=$(tput rmso) # Reverse off.
#+END_SRC

**** Subroutines

split up control flow

#+BEGIN_SRC sh :tangle setup.ksh
function clean
{
  echo "$REVON Removing Cruft... $REVOFF"
  rex remove_default_cruft
}

function ensure_hard
{
  echo "$REVON We will install p5-rex & git from ports now! $REVOFF"
  doas pkg_add -vm p5-Rex git
  ftp -o $HOME/Rexfile https://github.com/Izder456/dotfiles/raw/main/Rexfile
}

function ports_deps
{
  echo "$REVON We will install port deps now! $REVOFF"
  doas pkg_add -vvvvm -l ~/.pkglist
}

function cargo_deps
{
  doas pkg_add rust
  echo "$REVON We will install cargo deps now! $REVOFF"
  xargs cargo install < ~/.cargolist
}

function config_install
{
  ensure_hard
  echo "$REVON Cloning/Installing Dots... $REVOFF"
  if [[ ! -d "${HOME}/.dotfiles" ]]; then
    git clone --depth 1 --recurse-submodules "https://github.com/Izder456/dotfiles.git" "${HOME}/.dotfiles"
  elif [[ -d "${HOME}/.dotfiles" ]]; then
    echo "Already here"
  else # something got fucked
    echo "Dots brokey"
    exit 1
  fi
  "${HOME}/.dotfiles/bin/dfm" install
  doas cp ~/.dotfiles/doas.conf /etc/doas.conf
}

function setup_shell
{
  ensure_hard
  echo "$REVON Setting up FiZSH... $REVOFF"
  rex configure_default_shell
  rex compile_afetch
}

function setup_backgrounds
{
  ensure_hard
  echo "$REVON Installing Backgrounds... $REVOFF"
  rex install_backgrounds
}

function setup_emacs
{
  ensure_hard
  echo "$REVON Setting up Emacs... $REVOFF"
  rex configure_emacs
}

function setup_stumpwm
{
  ensure_hard
  echo "$REVON Setting up StumpWM... $REVOFF"
  rex sbcl_quicklisp
  rex update_or_clone_stumpwm
}

function setup_misc
{
  ensure_hard
  setup_shell
  echo  "$REVON Misc setup... $REVOFF"
  rex compile_shuf
  rex compile_slock
  rex compile_st
  rex compile_surf
  rex setup_apmd
  rex install_backgrounds
  rex update_xdg_user_dirs
}

function setup_xenodm
{
  ensure_hard
  echo "$REVON Setting up XenoDM... $REVOFF"
  rex setup_xenodm
}
#+END_SRC

**** Wizard Menu

*(SH)adow wizard M0n3y G4ng*

/W3 L0V3 C4ST!NG SP3LLS/

#+BEGIN_SRC sh :tangle setup.ksh
HEADER_TEXT=`cat <<-EOF
\n$REVON Srcerizder Dotfiles Setup $REVOFF
\nOptions:
\n--------------------------
\n  1) Ports \t 4) StumpWM
\n  2) Cargo \t 5) Emacs
\n  3) Config\t 6) XenoDM
\n  7) Misc\t 8) Clean
\n
\nOther Options:
\n----------------
\n  a) All (Reccomended)
\n  r) Reload Menu
\n  q) Quit
\n
\nEnter your selection: r\b\c
EOF
`

while :
do
  clear
  print $HEADER_TEXT
  read selection
  if [[ -z "$selection" ]]
    then selection=r
  fi

  case $selection in
      1)  print "\nSelected Ports Deps..."
          sleep $SLEEPTIME
          ports_deps
          ;;
      2)  print "Selected Cargo Deps..."
          sleep $SLEEPTIME
          cargo_deps
          ;;
      3)  print "Selected Install Configs..."
          sleep $SLEEPTIME
          config_install
          ;;
      4)  print "Selected StumpWM Config..."
          sleep $SLEEPTIME
          setup_stumpwm
          ;;
      5)  print "Selected Emacs Config..."
          sleep $SLEEPTIME
          setup_emacs
          ;;
      6)  print "Selected XenoDM Config..."
          sleep $SLEEPTIME
          setup_xenodm
          ;;
      7)  print "Selected Misc..."
          sleep $SLEEPTIME
          setup_misc
          ;;
      8)  print "Selected Clean..."
          sleep $SLEEPTIME
          clean
          ;;
    a|A)  print "Running All..."
          sleep $SLEEPTIME
          clean
          config_install
          ports_deps
          cargo_deps
          setup_stumpwm
          setup_emacs
          setup_xenodm
          setup_misc
          ;;
    r|R)  continue
          ;;
    q|Q)  print
          exit
          ;;
      ,*)  print "\n$REVON Invalid selection $REVOFF"
          sleep 1
          ;;
  esac
done
#+END_SRC

*** Misc Stuffs

**** Quicklisp Install

you probably want this if you want to write with stumpwm and modules...

#+BEGIN_SRC lisp :tangle quicklisp-setup.lisp
(quicklisp-quickstart:install :path "~/.quicklisp")
(ql:add-to-init-file)
(ql:quickload '("clx"
                "cl-ppcre"
                "alexandria"
                "cl-fad"
                "anaphora"
                "drakma"))
#+END_SRC

/USE:/

#+BEGIN_SRC sh
$ ftp -o /tmp/quicklisp.lisp https://beta.quicklisp.org/quicklisp.org
$ ftp -o /tmp/quicklisp-setup.lisp https://github.com/Izder456/raw/main/quicklisp-setup.lisp
$ sbcl --load /tmp/quicklisp.lisp --load /tmp/quicklisp-setup.lisp
#+END_SRC

**** .Xsession/.Xresources/.Xprofile

#+BEGIN_SRC sh :tangle .xprofile
#!/bin/sh
export LC_ALL=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8
export QT_QPA_PLATFORMTHEME=gtk2
export SDL_VIDEO_X11_DGAMOUSE=0
#+END_SRC

#+BEGIN_SRC
!!
! XWindow Stuffs
!!
*imLocale: en_US.UTF-8

!!
! XTerm Stuffs
!!
*intensityStyles: true
*allowSendEvents: true
xterm*scrollBar: false
xterm*faceName: Spleen
xterm*faceSize: 12
xterm*renderFont: true
xterm*internalBorder: 16
xterm*letterSpace: 1
xterm*loginShell: true
xterm*savelines: 16384

!!
! Font Rendering Stuffs
!!
Xft.dpi: 96
Xft.rgba: rgb
Xft.antialias: true
Xft.autohint: false
Xft.hintstyle: hintfull
Xft.lcdfilter: lcddefault
*faceName: Spleen
*faceSize: 12

!!
! XClock Stuffs
!!
XClock*Background: #32302f
XClock*Foreground: #ebdbb2

!!
! Pointer Stuffs
!!
Xcursor.size: 16
Xcursor.theme: Capitaine Cursors (Gruvbox) - White

!!
! Background Colors
!!
! Normal
*background: #282828
*foreground: #ebdbb2
! Hard-Dark
*.activeBackground: #1d2021
*.activeForeground: #32302f

!!
! Gruvbox Colors
!!
! Black + DarkGrey
*color0:  #282828
*color8:  #928374
! DarkRed + Red
*color1:  #cc241d
*color9:  #fb4934
! DarkGreen + Green
*color2:  #98971a
*color10: #b8bb26
! DarkYellow + Yellow
*color3:  #d79921
*color11: #fabd2f
! DarkBlue + Blue
*color4:  #458588
*color12: #83a598
! DarkMagenta + Magenta
*color5:  #b16286
*color13: #d3869b
! DarkCyan + Cyan
*color6:  #689d6a
*color14: #8ec07c
! LightGrey + White
*color7:  #a89984
*color15: #ebdbb2
#+END_SRC

#+BEGIN_SRC sh :tangle .xsession
#!/bin/sh
[ -f /etc/xprofile ] && . /etc/xprofile
[ -f ~/.xprofile ] && . ~/.xprofile
[ -f ~/.xresources ] && xrdb ~/.xresources
if [ -x /usr/local/bin/dbus-launch -a -z "${DBUS_SESSION_BUS_ADDRESS}" ]; then
        eval `dbus-launch --sh-syntax --exit-with-x11`
fi
export LC_CTYPE="en_US.UTF-8"
export MOZ_ACCELERATED=1
export MOZ_WEBRENDER=1
xset b off
dunst &
picom -f -b &
ulimit -d 17000000
ulimit -Sc 0
xset +fp /usr/local/share/fonts/spleen
feh --bg-fill $(shuf -n1 -e /usr/local/share/backgrounds/*.png) &
xidle -delay 5 -nw -program "/usr/local/bin/slock" -timeout 1800 &
stumpwm
#+END_SRC

**** Sysctl.conf

Open Kernel Limits n Allat

*Very hardware specific*

#+BEGIN_SRC conf :tangle sysctl.conf
# Allow KMem
kern.allowkmem=1

# IP-Forward
net.inet.ip.forwarding=1
net.inet6.ip6.forwarding=1

# Shared Mem
kern.shminfo.shmall=3135729
kern.shminfo.shmmax=999999999
kern.shminfo.shmmni=1024
kern.shminfo.shmseg=1024

# Semaphores
kern.seminfo.semmns=4096
kern.seminfo.semmni=1024

# Kernel Limit
kern.bufcachepercent=90
kern.maxproc=32768
kern.maxfiles=65535
kern.maxvnodes=262144
kern.somaxconn=2048

# Multithreading
hw.smt=1

# Tearing
machdep.allowaperture=1

# Video/Audio
kern.audio.record=1
kern.video.record=1

# Internet Speed
net.inet.icmp.errppslimit=1000
net.inet.tcp.ackonpush=1
net.inet.tcp.ecn=1
net.inet.tcp.mssdflt=1452
net.inet.tcp.rfc1323=1
net.inet.tcp.sack=1
net.inet.udp.recvspace=262144
net.inet.udp.sendspace=262144
#+END_SRC

**** Dfm-Install

dfm install script config

#+BEGIN_SRC txt :tangle .dfminstall
.fonts recurse
.git recurse
.icons recurse
.themes recurse
.moc recurse
.config recurse
.local recurse
LICENSE.txt skip
COPYING skip
README.org skip
quicklisp-setup.lisp skip
doas.conf skip
sysctl.conf skip
setup.ksh skip
setup.pl.bak skip
bin skip
assets skip
backgrounds skip
Emacs-Config skip
StumpWM-Config skip
XenoDM-Config skip
APM-Config skip
#+END_SRC

**** Doas.conf

This is totally overkill

#+BEGIN_SRC conf :tangle doas.conf
permit persist :doas
permit nopass :operator cmd ln
permit nopass :operator cmd cp
permit nopass :operator cmd mv
permit nopass :operator cmd make
permit nopass :operator cmd mkdir
permit nopass :operator cmd reboot
permit nopass :operator cmd halt
permit nopass :operator cmd install
permit nopass :operator cmd mkfontdir
permit nopass :operator cmd pkg_add
permit nopass :operator cmd pkg_info
permit nopass :operator cmd pkg_delete
permit nopass :operator cmd pkg_mklocatedb
permit nopass :operator cmd fc-cache
permit nopass :operator cmd hw-probe
permit nopass :operator cmd sysmerge
permit nopass :operator cmd sysupgrade
permit nopass :operator cmd syspatch
permit nopass :operator cmd mount
permit nopass :operator cmd umount
#+END_SRC

**** CARGOLIST

Cargo Package List

#+BEGIN_SRC txt :tangle .cargolist
cargo-update-installed du-dust hyperfine onefetch sd tere tokei
#+END_SRC

*** Rexfile
**** Perl-Boilerplate

Set up "subroutines" in perl, That I'll use later.

#+BEGIN_SRC perl :tangle Rexfile
use 5.36.0;
use Rex -feature => ['1.4'];

# Set PATH explicitly
$ENV{'PATH'} =
'/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:$HOME/bin';

# No Magic
our $USERHOME = "$ENV{HOME}";
our $GITHUB   = "https://github.com";
#+END_SRC

**** Remove-Cruft

I don't need some of these defaults

#+BEGIN_SRC perl :tangle Rexfile
# task to clean home dir
task 'remove_default_cruft', sub {
  unlink(
      "$USERHOME/.cshrc",   "$USERHOME/.login",     "$USERHOME/.mailrc",
      "$USERHOME/.profile", "$USERHOME/.Xdefaults", "$USERHOME/.cvsrc"
  );
  system( 'doas', 'chmod', '0700', "$USERHOME" );
};
#+END_SRC


**** FiZSH-Setup

This is a zsh frontend, that emulates the functionality of fish

#+BEGIN_SRC perl :tangle Rexfile
# Configures and sets up the default shell
task 'configure_default_shell', sub {
  my %plugins = (
      "zsh-openbsd" => "$GITHUB/sizeofvoid/openbsd-zsh-completions.git",
      "zsh-fzf"     => "$GITHUB/Aloxaf/fzf-tab.git",
      "zsh-suggest" => "$GITHUB/zsh-users/zsh-autosuggestions.git",
      "zsh-256"     => "$GITHUB/chrissicool/zsh-256color.git",
      "zsh-fsh"     => "$GITHUB/zdharma-continuum/fast-syntax-highlighting.git"
  );
  keys %plugins;
  while(my($k, $v) = each %plugins) {
    my $clonedir = "$USERHOME/.$k";
    my $cloneuri = "$v";
    if ( -d $clonedir ) {
      chdir "$clonedir";
      system( 'git', 'pull' );
    }
    else {
      system( 'git',       'clone',
              "$cloneuri", "$clonedir" );
    }
  }

  # Grab fizsh src setup
  if ( -d "$USERHOME/.fizsh" ) {
    chdir "$USERHOME/.fizsh";
  }
  else {
    system( 'git',                         'clone',
            "$GITHUB/zsh-users/fizsh.git", "$USERHOME/.fizsh" );
    chdir "$USERHOME/.fizsh";
  }
  system( './configure' );
  system( 'make' );
  system( 'doas', 'make',                       'install' );
  system( 'cp', "$USERHOME/.dotfiles/.fizshrc", "$USERHOME/.fizsh/.fizshrc" );
  system( 'chsh', '-s',                         '/usr/local/bin/fizsh' );
};
#+END_SRC

**** Emacs-Setup

I use Emacs, btw

#+BEGIN_SRC perl :tangle Rexfile
# Configures and installs emacs
task 'configure_emacs', sub {
  if ( -d "$USERHOME/.emacs.d" ) {
    chdir "$USERHOME/.emacs.d";
  } else {
    system( 'ln',                               '-sf',
            "$USERHOME/.dotfiles/Emacs-Config", "$USERHOME/.emacs.d" );
  }
};
#+END_SRC

**** StumpWM-Setup

Yeah, this weird WM...

#+BEGIN_SRC perl :tangle Rexfile
task 'update_or_clone_stumpwm', sub {
  if ( -d "$USERHOME/.stumpwm.d" ) {
      chdir "$USERHOME/.stumpwm.d";
  }
  else {
      system( 'ln',                                 '-sf',
              "$USERHOME/.dotfiles/StumpWM-Config", "$USERHOME/.stumpwm.d" );
  }
};
#+END_SRC

**** XenoDM/Background-Setup

Because XDM wasn't cutting it...

#+BEGIN_SRC perl :tangle Rexfile
# Installs backgrounds to /usr/local/share/backgrounds
task 'install_backgrounds', sub {
  system( 'doas', 'mkdir', '-p', '/usr/local/share/backgrounds' );
  system( 'doas',
          'cp',                                      '-rvf',
          glob("$USERHOME/.dotfiles/backgrounds/*"), '/usr/local/share/backgrounds' );
};

# Sets up Xenodm configuration
task 'setup_xenodm', sub {
  system( 'doas',
          'cp',                                        '-rvf',
          glob("$USERHOME/.dotfiles/XenoDM-Config/*"), '/etc/X11/xenodm/' );
};
#+END_SRC

**** APMD_AutoHook-Lock

Setup Laptop Slock shell-close autohook

#+BEGIN_SRC perl :tangle Rexfile
task 'setup_apmd', sub {
  system( 'doas', 'mkdir', '/etc/apm' );
  system( 'doas',
          'cp',                                     '-rvf',
          glob("$USERHOME/.dotfiles/APM-Config/*"), '/etc/apm/' );
};
#+END_SRC

**** Extra-Packages

Extra stuff thats not in ports, cargo or base

#+BEGIN_SRC perl :tangle Rexfile
# Compiles shuf re-implementation
task 'sbcl_quicklisp', sub {
   system( 'ftp -o',
	   '/tmp/quicklisp.lisp', 'https://beta.quicklisp.org');
   system( 'ftp -o',
           '/tmp/quicklisp-setup.lisp', 'https://github.com/Izder456/dotfiles/raw/main/quicklisp-setup.lisp');
   system( 'doas', 'pkg_add', 'sbcl rlwrap');
   system( 'sbcl',
           '--load', '/tmp/quicklisp.lisp',
           '--script', '/tmp/quicklisp-setup.lisp');
};

task 'compile_shuf', sub {
  system( 'git',                    'clone',
          "$GITHUB/ibara/shuf.git", "$USERHOME/.shuf" );
  chdir "$USERHOME/.shuf";
  system( './configure' );
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my Slock Setup
task 'compile_slock', sub {
  system( 'git',                        'clone',
          "$GITHUB/Izder456/slock.git", "$USERHOME/.slock" );
  chdir "$USERHOME/.slock";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my SURF Setup
task 'compile_surf', sub {
  system( 'git',                       'clone',
          "$GITHUB/Izder456/surf.git", "$USERHOME/.surf-src" );
  chdir "$USERHOME/.surf-src";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my ST Setup
task 'compile_st', sub {
  system( 'git',                     'clone',
          "$GITHUB/Izder456/st.git", "$USERHOME/.st" );
  chdir "$USERHOME/.st";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles afetch
task 'compile_afetch', sub {
  system( 'git',                      'clone',
          "$GITHUB/13-CF/afetch.git", "$USERHOME/.afetch" );
  chdir "$USERHOME/.afetch";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};
#+END_SRC

**** Xdg-UserDirs

Setup Homedir Paths

#+BEGIN_SRC perl :tangle Rexfile
# Updates XDG user directories
task 'update_xdg_user_dirs', sub {
  system( 'xdg-user-dirs-update' );
  system( 'mkdir', "$USERHOME/Projects" );
  system( 'doas', 'gdk-pixbuf-query-loaders', '--update-cache' );
};
#+END_SRC

** Setup Script

*** Do as user:

#+BEGIN_SRC
$ ftp -o /tmp/setup.ksh $GITHUB/izder456/dotfiles/raw/main/setup.ksh
$ ksh /tmp/setup.ksh
#+END_SRC

** Note:

- My script doesn't perform any performance tweaking. Users should refer to [[https://openbsd.org/faq][the FAQ]], [[https://man.openbsd.org][manpages]], or the unofficial [[https://www.openbsdhandbook.com][OpenBSD Handbook]] for that.

- for laptops, I /highly recommend/ solene%'s power management daemon [[https://dataswamp.org/~solene/2022-03-21-openbsd-cool-frequency.html][obsdfreqd]]

- When the script installs dependencies, always choose the latest version when given a version choice from ~pkg_add~, except for Emacs, where you should choose the gtk2 variant.

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- Use with caution.
