#+TITLE: Iz's OpenBSD Dotfiles
#+DESCRIPTION: Mainly for personal backups, but if you want 'em, use 'em.
#+KEYWORDS: org-mode, emacs, doom-emacs, XenoDM, OpenBSD, stumpwm, elisp, lisp, perl, Rex, dotfiles, izder
#+LANGUAGE: en
#+PROPERTY: header-args: :tangle ~/.dotfiles :mkdirp t

#+BEGIN_HTML
<div align="left">
<img alt="GitHub Repo stars" src="https://img.shields.io/github/stars/izder456/dotfiles?style=plastic">
<img alt="Lines of code" src="https://tokei.rs/b1/github/izder456/dotfiles?category=code&style=plastic">
</div>
#+END_HTML

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- Use with caution.
* Shameless Unixporn for internet points.

#+html: <p align="center"><img width=700 src="assets/XenoDM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/StumpWM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/Emacs.png" /></p>

* Crucial Information

- While /there *is*/ a setup script in this project, =it's not meant to be plug-and-play=. /It's a bare-bones setup/ that is fairly non-portable and will require some tinkering to work perfectly. I don't see this as a problem because I'm comfortable customizing it to my needs.

* Note:

- My script doesn't perform any performance tweaking. Users should refer to [[https://openbsd.org/faq][the FAQ]], [[https://man.openbsd.org][manpages]], or the unofficial [[https://www.openbsdhandbook.com][OpenBSD Handbook]] for that.

- for laptops, I /highly recommend/ solene%'s power management daemon [[https://dataswamp.org/~solene/2022-03-21-openbsd-cool-frequency.html][obsdfreqd]]

- When the script installs dependencies, always choose the latest version when given a version choice from ~pkg_add~.

* Table of Contents :TOC_4:
- [[#disclaimer][DISCLAIMER]]
- [[#shameless-unixporn-for-internet-points][Shameless Unixporn for internet points.]]
- [[#crucial-information][Crucial Information]]
- [[#note][Note:]]
- [[#setup][Setup]]
  - [[#initscript][InitScript]]
      - [[#boilerplate][Boilerplate]]
      - [[#subroutines][Subroutines]]
      - [[#will-it-run][Will it run?]]
      - [[#wizard-menu][Wizard Menu]]
  - [[#misc-stuffs][Misc Stuffs]]
      - [[#quicklisp-install][Quicklisp Install]]
      - [[#xsessionxresourcesxprofile][.Xsession/.Xresources/.Xprofile]]
      - [[#picomconf][picom.conf]]
      - [[#dunstrc][Dunstrc]]
      - [[#mkconf][mk.conf]]
      - [[#exrc][.exrc]]
      - [[#sysctlconf][Sysctl.conf]]
      - [[#packer-filter-config][Packer Filter config]]
      - [[#dfm-install][Dfm-Install]]
      - [[#doasconf][Doas.conf]]
      - [[#cargo-list][Cargo-list]]
  - [[#rexfile][Rexfile]]
      - [[#perl-boilerplate][Perl-Boilerplate]]
      - [[#remove-cruft][Remove-Cruft]]
      - [[#fizsh-setup][FiZSH-Setup]]
      - [[#icons-and-gtk-stuffs][Icons and GTK stuffs]]
      - [[#emacs-setup][Emacs-Setup]]
      - [[#stumpwm-setup][StumpWM-Setup]]
      - [[#enhanced-motif-wm-setup][Enhanced Motif WM Setup]]
      - [[#xenodmbackground-setup][XenoDM/Background-Setup]]
      - [[#apmd_autohook-lock][APMD_AutoHook-Lock]]
      - [[#extra-packages][Extra-Packages]]
      - [[#xdg-userdirs][Xdg-UserDirs]]
- [[#setup-script][Setup Script]]

* Setup
** InitScript

This setup script is written in Korn Shell from OpenBSD base.

**** Boilerplate

the basic setup of the KSH script, as well as some GLOBALS.

#+BEGIN_SRC sh :tangle setup.ksh
#!/bin/ksh

# configuration variables
typeset -r SLEEPTIME=2

# "colors"
REVON=$(tput smso)  # Reverse on.
REVOFF=$(tput rmso) # Reverse off.

# logfile
LOG_FILE="/tmp/setup.log"

function log {
    local timestamp=$(date +"%Y-%m-%d_%H:%M:%S")
    echo "[$timestamp] $1" | tee -a "$LOG_FILE"
}

# error handling
trap 'log "Error occurred at line $LINENO"; exit 1' ERR
#+END_SRC

**** Subroutines

some basic functions i will be using

#+BEGIN_SRC sh :tangle setup.ksh
function clean {
    log "$REVON Removing Cruft... $REVOFF"
    rex remove_default_cruft
}

function ensure_lisp {
    log "$REVON Quicklisp Setup $REVOFF"
    doas pkg_add -vm sbcl rlwrap
    ftp -o /tmp/quicklisp.lisp https://beta.quicklisp.org/quicklisp.lisp
    ftp -o /tmp/quicklisp-setup.lisp https://github.com/izder456/dotfiles/raw/main/quicklisp-setup.lisp
    sbcl --load /tmp/quicklisp.lisp --script /tmp/quicklisp-setup.lisp
}

function ports_deps {
    log "$REVON We will install port deps now! $REVOFF"
    doas pkg_add -vvvvm -l ~/.pkglist
}

function cargo_deps {
    doas pkg_add rust
    log "$REVON We will install cargo deps now! $REVOFF"
    xargs cargo install < ~/.cargolist
}

function config_install {
    log "$REVON Cloning/Installing Dots... $REVOFF"
    if [[ ! -d "${HOME}/.dotfiles" ]]; then
        git clone --depth 1 --recurse-submodules "https://github.com/Izder456/dotfiles.git" "${HOME}/.dotfiles"
    elif [[ -d "${HOME}/.dotfiles" ]]; then
        log "Already here"
        (cd "${HOME}/.dotfiles"
         git pull --recurse-submodules --depth 1)
        cd "${HOME}"
    else # something got fucked
        log "Dots brokey"
        exit 1
    fi
    rex configure_gtk
    rex configure_icons
    "${HOME}/.dotfiles/bin/dfm" install
    doas cp ~/.dotfiles/doas.conf /etc/doas.conf
}

function setup_shell {
    log "$REVON Setting up FiZSH... $REVOFF"
    rex configure_default_shell
    rex compile_afetch
}

function setup_backgrounds {
    log "$REVON Installing Backgrounds... $REVOFF"
    rex install_backgrounds
}

function setup_emacs {
    log "$REVON Setting up Emacs... $REVOFF"
    rex configure_emacs
}

function setup_emwm {
    log "$REVON Setting up Enhanced Motif WM... $REVOFF"
    rex configure_emwm
}

function setup_stumpwm {
    ensure_lisp
    log "$REVON Setting up StumpWM... $REVOFF"
    rex configure_stumpwm
}

function setup_misc {
    setup_shell
    log  "$REVON Misc setup... $REVOFF"
    rex compile_shuf
    rex compile_slock
    rex compile_st
    rex compile_surf
    rex compile_nxbelld
    rex configure_apmd
    rex install_backgrounds
    rex update_xdg_user_dirs
}

function setup_xenodm {
    log "$REVON Setting up XenoDM... $REVOFF"
    rex configure_xenodm
}
#+END_SRC

**** Will it run?

You need some things to make this crap work. This checks those things. So it will work.

#+BEGIN_SRC sh :tangle setup.ksh
function is_internet_up {
    log "$REVON Checking if we have internet...$REVOFF"
    if nc -zw1 OpenBSD.org 443; then
        log "$REVON We have a Connection!$REVOFF"
    else
        return 1
    fi
}

function ensure_needed {
    log "$REVON We need git and p5-Rex from ports for functionality"
    log "$REVON We will install p5-rex & git from ports now! $REVOFF"
    doas pkg_add -vm p5-Rex git
    ftp -o $HOME/Rexfile https://github.com/Izder456/dotfiles/raw/main/Rexfile
}


function do_ensure {
    is_internet_up
    ensure_needed
}

do_ensure
#+END_SRC

**** Wizard Menu

The interactive menu for the setup process.

#+BEGIN_SRC sh :tangle setup.ksh
HEADER_TEXT=`cat <<-EOF
\n$REVON Srcerizder Dotfiles Setup $REVOFF
\nOptions:
\n--------------------------
\n  1) Ports \t 4) StumpWM
\n  2) Cargo \t 5) Emacs
\n  3) Emwm \t 6) Xenodm
\n  7) Config \t 8) Misc
\n  9) Clean
\n  
\n
\nOther Options:
\n----------------
\n  a) All (Reccomended)
\n  r) Reload Menu
\n  q) Quit
\n
\nEnter your selection: r\b\c
EOF
`


function main {
    while :
    do
        clear
        print $HEADER_TEXT
        read selection
        if [[ -z "$selection" ]]; then
            selection=r
        fi
        case $selection in
            1) print "\nSelected Ports Deps..."
               sleep $SLEEPTIME
               ports_deps;;
            2) print "Selected Cargo Deps..."
               sleep $SLEEPTIME
               cargo_deps;;
            3) print "Selected Emwm Config..."
               sleep $SLEEPTIME
               setup_emwm;;
            4) print "Selected StumpWM Config..."
               sleep $SLEEPTIME
               setup_stumpwm;;
            5) print "Selected Emacs Config..."
               sleep $SLEEPTIME
               setup_emacs;;
            6) print "Selected XenoDM Config..."
               sleep $SLEEPTIME
               setup_xenodm;;
            7) print "Selected Install Configs..."
               sleep $SLEEPTIME
               config_install;;
            8) print "Selected Misc Setup..."
               sleep $SLEEPTIME
               setup_misc;;
            9) print "Selected Clean..."
               sleep $SLEEPTIME
               clean;;
            a|A) print "Running All..."
                 sleep $SLEEPTIME
                 clean
                 config_install
                 ports_deps
                 cargo_deps
                 setup_emwm
                 setup_stumpwm
                 setup_emacs
                 setup_xenodm
                 setup_misc;;
            r|R) continue;;
            q|Q) print
                 exit;;
            ,*) print "\n$REVON Invalid selection $REVOFF"
               sleep 1;;
        esac
    done
}

# main
main
#+END_SRC

** Misc Stuffs

random scripts and configs that are maybe relevant possibly.

**** Quicklisp Install

You probably want this if you want to write with StumpWM and modules...

#+BEGIN_SRC lisp :tangle quicklisp-setup.lisp
(quicklisp-quickstart:install :path "~/.quicklisp")
(ql:add-to-init-file)
(ql-dist:install-dist "http://dist.ultralisp.org/"
		      :prompt nil)
(ql:quickload '("clx"
		"cl-ppcre"
		"alexandria"
		"cl-fad"
		"xembed"
		"anaphora"
		"drakma"
		"slynk"))
#+END_SRC

/USE:/

#+BEGIN_SRC sh
$ ftp -o /tmp/quicklisp.lisp https://beta.quicklisp.org/quicklisp.lisp
$ ftp -o /tmp/quicklisp-setup.lisp https://github.com/Izder456/raw/main/quicklisp-setup.lisp
$ sbcl --load /tmp/quicklisp.lisp --script /tmp/quicklisp-setup.lisp
#+END_SRC

**** .Xsession/.Xresources/.Xprofile

The settings for X session, resources, and profile.

***** .xprofile

#+BEGIN_SRC sh :tangle .xprofile
#!/bin/sh
# Set Default LOCALE
export LC_CTYPE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"
# Enable HWACCEL for Firefox
export MOZ_ACCELERATED=1
export MOZ_WEBRENDER=1
# set qt apps to use gtk2 widgets if avail
export QT_QPA_PLATFORMTHEME=gtk2
# make sdl mouse cursor lag go away
export SDL_VIDEO_X11_DGAMOUSE=0
# Raise Ulimits and Disable .core dumps
ulimit -d 17000000
ulimit -Sc 0
#+END_SRC

***** .xresources

#+BEGIN_SRC conf :tangle .xresources
!!
! Includes
!!
#include ".xresources.d/colors"
#include ".xresources.d/apps"
	 
!!
! XWindow Stuffs
!!
,*imLocale: en_US.UTF-8

!!
! Font Rendering Stuffs
!!
Xft.dpi: 96
Xft.rgba: rgb
Xft.antialias: true
Xft.autohint: false
Xft.hintstyle: hintfull
Xft.lcdfilter: lcddefault
,*faceName: Spleen
,*faceSize: 12

!!
! Pointer Stuffs
!!
Xcursor.size: 16
Xcursor.theme: Capitaine Cursors (Gruvbox) - White
#+END_SRC

****** Colors

#+BEGIN_SRC conf :tangle .xresources.d/colors	
!!
! Background Colors
!!

! Normal
,*background: #282828
,*foreground: #ebdbb2
! Hard-Dark
,*.activeBackground: #1d2021
,*.activeForeground: #32302f
! Highlight
,*highlightColor: #fcf1c7

!!
! Gruvbox Colors
!!
! Black + DarkGrey
,*color0:  #282828
,*color8:  #928374
! DarkRed + Red
,*color1:  #cc241d
,*color9:  #fb4934
! DarkGreen + Green
,*color2:  #98971a
,*color10: #b8bb26
! DarkYellow + Yellow
,*color3:  #d79921
,*color11: #fabd2f
! DarkBlue + Blue
,*color4:  #458588
,*color12: #83a598
! DarkMagenta + Magenta
,*color5:  #b16286
,*color13: #d3869b
! DarkCyan + Cyan
,*color6:  #689d6a
,*color14: #8ec07c
! LightGrey + White
,*color7:  #a89984
,*color15: #ebdbb2

!!
! Gruvbox 256color
!!
! BrightBlue
,*color24:  #076678
! BrightAqua
,*color66:  #427b58
! BrightRed
,*color88:  #9d0006
! BrightMagenta
,*color96:  #8f3f71
! BrightGreen
,*color100: #79740e
! DimBlue
,*color109: #83a598
! DimAqua
,*color108: #8ec07c
! DimRed
,*color130: #af3a03
! DimYellow
,*color136: #b57614
! DimGreen
,*color142: #b8bb26
! DimRed
,*color167: #fb4934
! DimMagenta
,*color175: #d3869b
! Orange
,*color208: #fe8019
! BrightYellow
,*color214: #fabd2f
!! fg0-fg3
,*color223: #ebdbb2
,*color228: #f2e5bc
,*color229: #fbf1c7
,*color230: #f9f5d7
!! bg0-bg3
,*color234: #1d2021
,*color235: #282828
,*color236: #32302f
,*color237: #3c3836
!! Gray0-Gray7
,*color239: #504945
,*color241: #665c54
,*color243: #7c6f64
,*color244: #928374
,*color245: #928374
,*color246: #a89984
,*color248: #bdae93
,*color250: #d5c4a1
#+END_SRC

****** Apps

#+BEGIN_SRC conf :tangle .xresources.d/apps

!!
! XMessage
!!
xmessage*background: #1d2021
xmessage*foreground: #fbf1c7
xmessage.borderWidth: 3
xmessage*borderColor: #ebdbb2
xmessage*message.scrollHorizontal: Never
xmessage*message.scrollVertical: Never
xmessage*timeout: 0
xmessage*printValue: false
xmessage*font:	     -misc-spleen-medium-r-normal--16-160-72-72-c-80-iso10646-1

!!
! XTerm
!!
,*intensityStyles: true
,*allowSendEvents: true
xterm*scrollBar: false
xterm*faceName: Spleen
xterm*faceSize: 12
xterm*renderFont: true
xterm*internalBorder: 16
xterm*letterSpace: 1
xterm*loginShell: true
xterm*savelines: 16384

!!
! XClock Stuffs
!!
XClock*Background: #32302f
XClock*Foreground: #ebdbb2		 
#+END_SRC

***** .xsession

#+BEGIN_SRC sh :tangle .xsession
#!/bin/ksh

# Define variables at the top for easy access
XMESG_WIDTH=512
XMESG_HEIGHT=128

# Function to get screen dimensions
function get_screen_dimension {
    typeset dimension=$(xdpyinfo | awk '/dimensions/ {print $2}')
    case $1 in
         0) echo ${dimension%x*} ;;
         1) echo ${dimension#*x} ;;
         *) echo "Invalid argument. Use 0 for width or 1 for height." ;;
    esac
}

# Function to load environment
function load_environment {
    set -A files "$@"
    for file in "${file[@]}"; do
        if [ -f $file ]; then
            . $file
        fi
    done
}

# Function to load resources
function load_resources {
    set -A resources "$@"
    for resource in "${resources[@]}"; do
        if [ -f $resource ]; then
            xrdb -merge $resource
        fi
    done
}

# Function to manage autostarts
function manage_autostarts {
    for process in "$@"; do
        process_name="${process% *}"
        if pgrep -x $process_name > /dev/null; then
            pkill $process_name
        fi
        eval $process &
    done
}

# Function to select a window manager
function select_wm {
    # WM Session Prompt
    typeset xwidth=$(get_screen_dimension 0)
    typeset xheight=$(get_screen_dimension 1)
    typeset xmesg_xpos=$((($xwidth - $XMESG_WIDTH) / 2))
    typeset xmesg_yoffset=$((($xheight - $XMESG_HEIGHT) / 2))
    xmessage "Please Choose a Session to load" \
    	    -buttons "StumpWM[]":1,"EMWM[]":2,"CWM[]":3,"FVWM[]":4 \
    	    -geometry ${XMESG_WIDTH}x${XMESG_HEIGHT}+${xmesg_xpos}-${xmesg_yoffset}
    typeset choice=$?

    case ${choice} in
    	1) wm=$(which stumpwm)
    	   wm_args="--diable-ldb --lose-on-corruption"
    	   ;;
    	2) wm=$(which xmsession)
    	   wm_args=""
    	   ;;
    	3) wm=$(which cwm)
    	   wm_args=""
    	   ;;
    	4) wm=$(which fvwm)
    	   wm_args=""
    	   ;;
    esac

    exec dbus-launch --exit-with-session ${wm} ${wm_args} &
    typeset wait_pid=$!

    wait ${wait_pid}
}

# Load in environment & resources
load_environment /etc/xprofile ~/.xprofile
load_resources ~/.xresources ~/.xresources.d/emwm

# Autostarts
manage_autostarts "dunst" \
                  "picom -b" \
                  "~/.local/bin/nxbelld -v100 -d200 -f ~/.local/sfx/Pop.wav -b" \
                  "feh --bg-fill --randomize /usr/local/share/backgrounds" \
                  "xidle -delay 5 -nw -program /usr/local/bin/slock -timeout 1800"

# Select Window Manager
select_wm

exit 0
#+END_SRC

**** picom.conf

#+BEGIN_SRC conf :tangle .config/picom/picom.conf
##
# Opacity
##

opacity-rule = [
  "85:class_g = 'emacs'",
  "85:class_g = 'st'",
  "85:class_g = 'xterm'",
  "85:class_g = 'tabbed'"
];

##
# Blur
##

blur: {
  method = "dual_kawase";
  size = 5;
  deviation = 5.0;
  strength = 4;
  background-fixed = true;
};


##
# Wintypes
##

wintypes: {
  normal = { blur-background = true; };
  splash = { blur-background = false; };
};

##
# Fading
##

fading = true;
fade-in-step = 0.03;
fade-out-step = 0.03;
fade-exclude = [ ];

##
# Misc
##
mark-wwin-focused = true;
mark-ovredir-focused = true;
detect-rounded-corners = true;
detect-client-opacity = true;
vsync = true;
dbe = false;
sw-opti = true; 
refresh-rate = 0;
unredir-if-possible = true;
detect-transient = true;
detect-client-leader = true;
invert-color-include = [ ];

##
# QT-Apps Fixes For Blurs
##
shadow-exclude = [
  "argb && (_NET_WM_WINDOW_TYPE@:a *= 'MENU' || _NET_WM_WINDOW_TYPE@:a *= 'COMBO')"
];
blur-background-exclude = [
  "(_NET_WM_WINDOW_TYPE@:a *= 'MENU' || _NET_WM_WINDOW_TYPE@:a *= 'COMBO')"
];


##
# Backend
##
backend = "glx";
glx-no-stencil = true;
glx-copy-from-front = false;
use-damage = true;
glx-no-rebind-pixmap = true;
#+END_SRC

**** Dunstrc

#+BEGIN_SRC conf :tangle .config/dunst/dunstrc	
[global]
    ### Display ###

    # Which monitor should the notifications be displayed on.
    monitor = 0

    # Display notification on focused monitor.  Possible modes are:
    #   mouse: follow mouse pointer
    #   keyboard: follow window with keyboard focus
    #   none: don't follow anything
    #
    # "keyboard" needs a window manager that exports the
    # _NET_ACTIVE_WINDOW property.
    # This should be the case for almost all modern window managers.
    #
    # If this option is set to mouse or keyboard, the monitor option
    # will be ignored.
    follow = none

    ### Geometry ###

    # dynamic width from 0 to 300
    # width = (0, 300)
    # constant width of 300
    width = (0, 256) 
    # The maximum height of a single notification, excluding the frame.
    height = (0, 256)

    # Position the notification in the top right corner
    origin = bottom-right 

    # Offset from the origin
    offset = 0x0

    # Scale factor. It is auto-detected if value is 0.
    scale = 0

    # Maximum number of notification (0 means no limit)
    notification_limit = 3

    ### Progress bar ###

    # Turn on the progess bar. It appears when a progress hint is passed with
    # for example dunstify -h int:value:12
    progress_bar = true

    # Set the progress bar height. This includes the frame, so make sure
    # it's at least twice as big as the frame width.
    progress_bar_height = 10

    # Set the frame width of the progress bar
    progress_bar_frame_width = 1

    # Set the minimum width for the progress bar
    progress_bar_min_width = 150

    # Set the maximum width for the progress bar
    progress_bar_max_width = 300

    # Corner radius for the progress bar. 0 disables rounded corners.
    progress_bar_corner_radius = 0

    # Corner radius for the icon image.
    icon_corner_radius = 0

    # Show how many messages are currently hidden (because of
    # notification_limit).
    indicate_hidden = yes

    # The transparency of the window.  Range: [0; 100].
    # This option will only work if a compositing window manager is
    # present (e.g. xcompmgr, compiz, etc.). (X11 only)
    transparency = 0

    # Draw a line of "separator_height" pixel height between two
    # notifications.
    # Set to 0 to disable.
    # If gap_size is greater than 0, this setting will be ignored.
    separator_height = 2

    # Padding between text and separator.
    padding = 8

    # Horizontal padding.
    horizontal_padding = 10

    # Padding between text and icon.
    text_icon_padding = 0

    # Defines width in pixels of frame around the notification window.
    # Set to 0 to disable.
    frame_width = 4

    # Defines color of the frame around the notification window.
    frame_color = "#d5c4a1"

    # Size of gap to display between notifications - requires a compositor.
    # If value is greater than 0, separator_height will be ignored and a border
    # of size frame_width will be drawn around each notification instead.
    # Click events on gaps do not currently propagate to applications below.
    gap_size = 2

    # Define a color for the separator.
    # possible values are:
    #  * auto: dunst tries to find a color fitting to the background;
    #  * foreground: use the same color as the foreground;
    #  * frame: use the same color as the frame;
    #  * anything else will be interpreted as a X color.
    separator_color = foreground

    # Sort messages by urgency.
    sort = yes

    # Don't remove messages, if the user is idle (no mouse or keyboard input)
    # for longer than idle_threshold seconds.
    # Set to 0 to disable.
    # A client can set the 'transient' hint to bypass this. See the rules
    # section for how to disable this if necessary
    idle_threshold = 120

    ### Text ###

    font = Spleen 6x12 11

    # The spacing between lines.  If the height is smaller than the
    # font height, it will get raised to the font height.
    line_height = 0

    # Possible values are:
    # full: Allow a small subset of html markup in notifications:
    #        <b>bold</b>
    #        <i>italic</i>
    #        <s>strikethrough</s>
    #        <u>underline</u>
    #
    #        For a complete reference see
    #        <https://docs.gtk.org/Pango/pango_markup.html>.
    #
    # strip: This setting is provided for compatibility with some broken
    #        clients that send markup even though it's not enabled on the
    #        server. Dunst will try to strip the markup but the parsing is
    #        simplistic so using this option outside of matching rules for
    #        specific applications *IS GREATLY DISCOURAGED*.
    #
    # no:    Disable markup parsing, incoming notifications will be treated as
    #        plain text. Dunst will not advertise that it has the body-markup
    #        capability if this is set as a global setting.
    #
    # It's important to note that markup inside the format option will be parsed
    # regardless of what this is set to.
    markup = full

    # The format of the message.  Possible variables are:
    #   %a  appname
    #   %s  summary
    #   %b  body
    #   %i  iconname (including its path)
    #   %I  iconname (without its path)
    #   %p  progress value if set ([  0%] to [100%]) or nothing
    #   %n  progress value if set without any extra characters
    #   %%  Literal %
    # Markup is allowed
    format = "<b>%a</b>\n%s\n<i>%b</i> "

    # Alignment of message text.
    # Possible values are "left", "center" and "right".
    alignment = left

    # Vertical alignment of message text and icon.
    # Possible values are "top", "center" and "bottom".
    vertical_alignment = center

    # Show age of message if message is older than show_age_threshold
    # seconds.
    # Set to -1 to disable.
    show_age_threshold = 60

    # Specify where to make an ellipsis in long lines.
    # Possible values are "start", "middle" and "end".
    ellipsize = middle

    # Ignore newlines '\n' in notifications.
    ignore_newline = no

    # Stack together notifications with the same content
    stack_duplicates = true

    # Hide the count of stacked notifications with the same content
    hide_duplicate_count = false

    # Display indicators for URLs (U) and actions (A).
    show_indicators = yes

    ### Icons ###

    # Recursive icon lookup. You can set a single theme, instead of having to
    # define all lookup paths.
    enable_recursive_icon_lookup = true

    # Set icon theme (only used for recursive icon lookup)
    icon_theme = Gruvbox_Dark
    # You can also set multiple icon themes, with the leftmost one being used first.
    # icon_theme = "Adwaita, breeze"

    # Align icons left/right/top/off
    icon_position = left

    # Scale small icons up to this size, set to 0 to disable. Helpful
    # for e.g. small files or high-dpi screens. In case of conflict,
    # max_icon_size takes precedence over this.
    min_icon_size = 32

    # Scale larger icons down to this size, set to 0 to disable
    max_icon_size = 64

    # Paths to default icons (only neccesary when not using recursive icon lookup)
    #icon_path = /usr/share/icons/gnome/16x16/status/:/usr/share/icons/gnome/16x16/devices/

    ### History ###

    # Should a notification popped up from history be sticky or timeout
    # as if it would normally do.
    sticky_history = yes

    # Maximum amount of notifications kept in history
    history_length = 20

    ### Misc/Advanced ###

    # Browser for opening urls in context menu.
    browser = /usr/bin/xdg-open

    # Always run rule-defined scripts, even if the notification is suppressed
    always_run_script = true

    # Define the title of the windows spawned by dunst
    title = Dunst

    # Define the class of the windows spawned by dunst
    class = Dunst

    # Define the corner radius of the notification window
    # in pixel size. If the radius is 0, you have no rounded
    # corners.
    # The radius will be automatically lowered if it exceeds half of the
    # notification height to avoid clipping text and/or icons.
    corner_radius = 0

    # Ignore the dbus closeNotification message.
    # Useful to enforce the timeout set by dunst configuration. Without this
    # parameter, an application may close the notification sent before the
    # user defined timeout.
    ignore_dbusclose = false

    ### Wayland ###
    # These settings are Wayland-specific. They have no effect when using X11

    # Uncomment this if you want to let notications appear under fullscreen
    # applications (default: overlay)
    # layer = top

    # Set this to true to use X11 output on Wayland.
    force_xwayland = false

    ### Legacy

    # Use the Xinerama extension instead of RandR for multi-monitor support.
    # This setting is provided for compatibility with older nVidia drivers that
    # do not support RandR and using it on systems that support RandR is highly
    # discouraged.
    #
    # By enabling this setting dunst will not be able to detect when a monitor
    # is connected or disconnected which might break follow mode if the screen
    # layout changes.
    force_xinerama = false

    ### mouse

    # Defines list of actions for each mouse event
    # Possible values are:
    # * none: Don't do anything.
    # * do_action: Invoke the action determined by the action_name rule. If there is no
    #              such action, open the context menu.
    # * open_url: If the notification has exactly one url, open it. If there are multiple
    #             ones, open the context menu.
    # * close_current: Close current notification.
    # * close_all: Close all notifications.
    # * context: Open context menu for the notification.
    # * context_all: Open context menu for all notifications.
    # These values can be strung together for each mouse event, and
    # will be executed in sequence.
    mouse_left_click = close_current
    mouse_middle_click = do_action, close_current
    mouse_right_click = close_all

# Experimental features that may or may not work correctly. Do not expect them
# to have a consistent behaviour across releases.
[experimental]
    # Calculate the dpi to use on a per-monitor basis.
    # If this setting is enabled the Xft.dpi value will be ignored and instead
    # dunst will attempt to calculate an appropriate dpi value for each monitor
    # using the resolution and physical size. This might be useful in setups
    # where there are multiple screens with very different dpi values.
    per_monitor_dpi = false 


[urgency_low]
    # IMPORTANT: colors have to be defined in quotation marks.
    # Otherwise the "#" and following would be interpreted as a comment.
    background = "#282828"
    foreground = "#928374"
    timeout = 10
    # Icon for notifications with low urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_normal]
    background = "#282828"
    foreground = "#ebdbb2"
    timeout = 10
    # Icon for notifications with normal urgency, uncomment to enable
    #default_icon = /path/to/icon

[urgency_critical]
    background = "#282828"
    foreground = "#fb4934"
    frame_color = "#fabd2f"
    timeout = 25
    # Icon for notifications with critical urgency, uncomment to enable
    #default_icon = /path/to/icon

# Every section that isn't one of the above is interpreted as a rules to
# override settings for certain messages.
#
# Messages can be matched by
#    appname (discouraged, see desktop_entry)
#    body
#    category
#    desktop_entry
#    icon
#    match_transient
#    msg_urgency
#    stack_tag
#    summary
#
# and you can override the
#    background
#    foreground
#    format
#    frame_color
#    fullscreen
#    new_icon
#    set_stack_tag
#    set_transient
#    set_category
#    timeout
#    urgency
#    icon_position
#    skip_display
#    history_ignore
#    action_name
#    word_wrap
#    ellipsize
#    alignment
#    hide_text
#
# Shell-like globbing will get expanded.
#
# Instead of the appname filter, it's recommended to use the desktop_entry filter.
# GLib based applications export their desktop-entry name. In comparison to the appname,
# the desktop-entry won't get localized.
#
# SCRIPTING
# You can specify a script that gets run when the rule matches by
# setting the "script" option.
# The script will be called as follows:
#   script appname summary body icon urgency
# where urgency can be "LOW", "NORMAL" or "CRITICAL".
#
# NOTE: It might be helpful to run dunst -print in a terminal in order
# to find fitting options for rules.

# Disable the transient hint so that idle_threshold cannot be bypassed from the
# client
#[transient_disable]
#    match_transient = yes
#    set_transient = no
#
# Make the handling of transient notifications more strict by making them not
# be placed in history.
#[transient_history_ignore]
#    match_transient = yes
#    history_ignore = yes

# fullscreen values
# show: show the notifications, regardless if there is a fullscreen window opened
# delay: displays the new notification, if there is no fullscreen window active
#        If the notification is already drawn, it won't get undrawn.
# pushback: same as delay, but when switching into fullscreen, the notification will get
#           withdrawn from screen again and will get delayed like a new notification
#[fullscreen_delay_everything]
#    fullscreen = delay
#[fullscreen_show_critical]
#    msg_urgency = critical
#    fullscreen = show

#[espeak]
#    summary = "*"
#    script = dunst_espeak.sh

#[script-test]
#    summary = "*script*"
#    script = dunst_test.sh

#[ignore]
#    # This notification will not be displayed
#    summary = "foobar"
#    skip_display = true

#[history-ignore]
#    # This notification will not be saved in history
#    summary = "foobar"
#    history_ignore = yes

#[skip-display]
#    # This notification will not be displayed, but will be included in the history
#    summary = "foobar"
#    skip_display = yes

#[signed_on]
#    appname = Pidgin
#    summary = "*signed on*"
#    urgency = low
#
#[signed_off]
#    appname = Pidgin
#    summary = *signed off*
#    urgency = low
#
#[says]
#    appname = Pidgin
#    summary = *says*
#    urgency = critical
#
#[twitter]
#    appname = Pidgin
#    summary = *twitter.com*
#    urgency = normal
#
#[stack-volumes]
#    appname = "some_volume_notifiers"
#    set_stack_tag = "volume"
#
# vim: ft=cfg
#+END_SRC

**** mk.conf

this configures my ports/src build environment, it goes in ~/etc/mk.conf~

#+BEGIN_SRC conf :tangle mk.conf
# set up overlays for wip ports, and my personal ports
PORTSDIR_PATH=${PORTSDIR}:${PORTSDIR}/openbsd-wip:${PORTSDIR}/mystuff
# other less importand crap, but nice to have nonetheless
WRKOBJDIR=/usr/obj
DISTDIR=/usr/distfiles
PACKAGE_REPOSITORY=/usr/packages
#+END_SRC

**** .exrc

for BSD Vi

#+BEGIN_SRC conf :tangle .exrc
" display current mode
set showmode
" show matching parens, brackets, etc
set showmatch
" display row/column info
set ruler
" autoindent tab = 2 space
set shiftwidth=2
" tab = 2 space
set tabstop=2
" display errors
set verbose
" enable horiz scroll
set leftright
" use extend regex
set extend
" case-less searching, unless uppercase
set iclower
" incremental searching
set searchincr
" print helpful messages (eg, 4 lines yanked)
set report=1
#+END_SRC

**** Sysctl.conf

The kernel parameters settings.

*Very hardware specific*

#+BEGIN_SRC conf :tangle sysctl.conf
# Open Kernel Limits
kern.maxthread=16385
kern.maxproc=8192
kern.maxfiles=32768

# Shared Memory
kern.shminfo.shmmax=2147483647
kern.shminfo.shmall=536870912
kern.shminfo.shmmni=4096

# Enable Multithreading
hw.smt=1

# Video/Audio enable/disable
# change these to =1 if you want microphone or webcam access
kern.audio.record=0
kern.video.record=0
#+END_SRC

**** Packer Filter config

This goes in =/etc/pf.conf=, use /with caution/

#+BEGIN_SRC conf :tangle pf.conf
# Macros
icmp_types = "{ echoreq }"
wifi_if = "{ iwm0 }"
eth_if = "{ em0 }"

# Options
set skip on lo
set block-policy drop
set state-policy if-bound
set fingerprints "/etc/pf.os"
set ruleset-optimization none
set optimization normal
set timeout { tcp.closing 60, tcp.established 7200 }

# Tables
table <bruteforce> persist
table <rfc6890> { 0.0.0.0/8 10.0.0.0/8 100.64.0.0/10 127.0.0.0/8 169.254.0.0/11
                  172.16.0.0/12 192.0.0.0/24 192.0.0.0/29 192.0.2.0/24 192.88.99.0/24 
                  192.168.0.0/16 198.18.0.0/15 195.51.100.0/24 203.0.113.0/24
                  240.0.0.0/4 255.255.255.255/32 }

# prevent IP spoofing
antispoof quick for $wifi_if
antispoof quick for $eth_if

# for logging
block in log on egress from <rfc6890>
block return out log on egress to <rfc6890>

# block all else
block all

# only allow special services 
## (OUT on GLOB: HTTP HTTPS SSH IRC over TLS SMTP submission SMTP SMTP over TLS DNS, 9999 for termbin)
pass out on egress proto { tcp udp } to port {80 1000 443 22 6697 587 993 25 465 53 5353 9999}
## (IN on ETH: ssh)
pass in on $eth_if proto tcp to port { 22 } \
	keep state (max-src-conn 15 max-src-conn-rate 3/1 \
		overload <bruteforce> flush global)
## (IN/OUT on GLOB: UDP for Discord & Games)
pass in proto udp from any to any port 50000:65535
pass out proto udp from any to any port 50000:65535
     
# ICMP
pass out inet proto icmp icmp-type $icmp_types 
#+END_SRC

**** Dfm-Install

dfm install script config

#+BEGIN_SRC txt :tangle .dfminstall
.fonts recurse
.git recurse
.icons recurse
.themes recurse
.moc recurse
.config recurse
.local recurse
.claws-mail recurse
LICENSE.txt skip
COPYING skip
README.org skip
quicklisp-setup.lisp skip
doas.conf skip
sysctl.conf skip
setup.ksh skip
setup.pl.bak skip
bin skip
assets skip
backgrounds skip
Emacs-Config skip
StumpWM-Config skip
XenoDM-Config skip
APM-Config skip
#+END_SRC

**** Doas.conf

+this is totally overkill+
fine now

#+BEGIN_SRC conf :tangle doas.conf
permit persist :doas
#+END_SRC

**** Cargo-list

The list of packages to be installed via Cargo.

#+BEGIN_SRC txt :tangle .cargolist
cargo-upgrade-command dipc du-dust hyperfine onefetch sd tere tokei
#+END_SRC

** Rexfile

this is an automation thingy i use. its definitely overkill, but i like perl.

**** Perl-Boilerplate

The initial setup for Perl.

#+BEGIN_SRC perl :tangle Rexfile
use 5.36.0;
use Rex -feature => ['1.4'];

# Set PATH explicitly
$ENV{'PATH'} =
  '/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:$HOME/bin';

# No Magic
our $USERHOME = "$ENV{HOME}";
our $GITHUB   = "https://github.com";
#+END_SRC

**** Remove-Cruft

I don't need some of these defaults

#+BEGIN_SRC perl :tangle Rexfile
# task to clean home dir
task 'remove_default_cruft', sub {
  unlink(
    "$USERHOME/.cshrc",   "$USERHOME/.login",     "$USERHOME/.mailrc",
    "$USERHOME/.profile", "$USERHOME/.Xdefaults", "$USERHOME/.cvsrc"
  );
  system( 'doas', 'chmod', '0700', "$USERHOME" );
};
#+END_SRC

**** FiZSH-Setup

This is a zsh frontend, that emulates the functionality of fish

#+BEGIN_SRC perl :tangle Rexfile
# Configures and sets up the default shell
task 'configure_default_shell', sub {
  my %plugins = (
    "zsh-openbsd"     => "$GITHUB/sizeofvoid/openbsd-zsh-completions.git",
    "zsh-completions" => "$GITHUB/zsh-users/zsh-completions.git",
    "zsh-fzf"         => "$GITHUB/Aloxaf/fzf-tab.git",
    "zsh-suggest"     => "$GITHUB/zsh-users/zsh-autosuggestions.git",
    "zsh-256"         => "$GITHUB/chrissicool/zsh-256color.git",
    "zsh-fsh"         => "$GITHUB/zdharma-continuum/fast-syntax-highlighting.git",
    "zsh-zvm"         => "$GITHUB/jeffreytse/zsh-vi-mode.git"
  );
  keys %plugins;
  while (my($k, $v) = each %plugins) {
    my $clonedir = "$USERHOME/.$k";
    my $cloneuri = "$v";
    if ( -d $clonedir ) {
      chdir "$clonedir";
      system( 'git', 'pull' );
    } else {
      system( 'git', 'clone', "$cloneuri", "$clonedir" );
    }
  }

  # Grab fizsh src setup
  if ( -d "$USERHOME/.fizsh" ) {
    chdir "$USERHOME/.fizsh";
  } else {
    system( 'git', 'clone', "$GITHUB/zsh-users/fizsh.git", "$USERHOME/.fizsh" );
    chdir "$USERHOME/.fizsh";
  }
  system( './configure' );
  system( 'make' );
  system( 'doas', 'make', 'install' );
  system( 'cp', "$USERHOME/.dotfiles/.fizshrc", "$USERHOME/.fizsh/.fizshrc" );
  system( 'chsh', '-s', '/usr/local/bin/fizsh' );
};
#+END_SRC

**** Icons and GTK stuffs

#+BEGIN_SRC perl :tangle Rexfile
task 'configure_gtk', sub {
  my %gtk = (
    "gruvbox-square-gtk" => "$GITHUB/jmattheis/gruvbox-dark-gtk.git",
    "gruvbox-round-gtk" => "$GITHUB/Fausto-Korpsvart/Gruvbox-GTK-Theme.git",
    "gruvbox-plus-gtk" => "$GITHUB/SylEleuth/gruvbox-plus-gtk.git",
  );
  keys %gtk;
  while (my($k, $v) = each %gtk) {
    my $clonedir = "/tmp/$k";
    my $cloneuri = "$v";
    if ( -d "$clonedir" ) {
      chdir "$clonedir";
      system( 'git', 'pull' );
    } else {
      system( 'git', 'clone', "$cloneuri", "$clonedir" );
    }
    if ( -d "$clonedir/themes" ) {
      system( 'cp', '-Rv', glob("$clonedir/themes/*"), "$USERHOME/.dotfiles/.themes/" );
    } elsif ( -d "$clonedir/Gruvbox-Plus-Dark" ) {
      system( 'cp', '-Rv', "$clonedir/Gruvbox-Plus-Dark", "$USERHOME/.dotfiles/.themes/" );
    } else {
      system( 'cp', '-Rv', "$clonedir", "$USERHOME/.dotfiles/.themes/" );
    }
    unlink("$clonedir");
  }
};

task 'configure_icons', sub {
  my %icons = (
    "gruvbox-round-icons" => "$GITHUB/Fausto-Korpsvart/Gruvbox-GTK-Theme.git",
    "gruvbox-square-icons" => "$GITHUB/jmattheis/gruvbox-dark-icons-gtk.git",
    "gruvbox-plus-icons" => "$GITHUB/SylEleuth/gruvbox-plus-icon-pack.git",
  );
  keys %icons;
  while (my($k, $v) = each %icons) {
    my $clonedir = "/tmp/$k";
    my $cloneuri = "$v";
    if ( -d "$clonedir" ) {
      chdir "$clonedir";
      system( 'git', 'pull' );
    } else {
      system( 'git', 'clone', "$cloneuri", "$clonedir" );
    }
    if ( -d "$clonedir/icons" ) {
      system( 'cp', '-Rv', glob("$clonedir/icons/*"), "$USERHOME/.dotfiles/.icons/" );
    } elsif ( -d "$clonedir/Gruvbox-Plus-Dark" ) {
      system( 'cp', '-Rv', "$clonedir/Gruvbox-Plus-Dark", "$USERHOME/.dotfiles/.icons/" );
    } else {
      system( 'cp', '-Rv', "$clonedir", "$USERHOME/.dotfiles/.icons/" );
    }
    unlink("$clonedir");
  }
};
#+END_SRC

**** Emacs-Setup

I use Emacs, btw

#+BEGIN_SRC perl :tangle Rexfile
# Configures and installs emacs
task 'configure_emacs', sub {
  if ( -d "$USERHOME/.emacs.d" ) {
    chdir "$USERHOME/.emacs.d";
  } else {
    system( 'ln', '-sf', "$USERHOME/.dotfiles/Emacs-Config", "$USERHOME/.emacs.d" );
  }
};
#+END_SRC

**** StumpWM-Setup

Yeah, this weird WM...

#+BEGIN_SRC perl :tangle Rexfile
task 'configure_stumpwm', sub {
  if ( -d "$USERHOME/.stumpwm.d" ) {
    chdir "$USERHOME/.stumpwm.d";
  } else {
    system( 'ln', '-sf', "$USERHOME/.dotfiles/StumpWM-Config", "$USERHOME/.stumpwm.d" );
  }
};
#+END_SRC

**** Enhanced Motif WM Setup

Yeah, I sometime float things

#+BEGIN_SRC perl :tangle Rexfile
task 'configure_emwm', sub {
    system( 'ln', '-sf', "$USERHOME/.dotfiles/Emwm-Config/.emwmrc", "$USERHOME/.emwmrc" );
    system( 'ln', '-sf', "$USERHOME/.dotfiles/Emwm-Config/.toolboxrc", "$USERHOME/.toolboxrc" );
    system( 'mkdir', '-p', "$USERHOME/.xresources.d" );
    system( 'ln', '-sf', "$USERHOME/.dotfiles/Emwm-Config/.xresources", "$USERHOME/.xresources.d/emwm" );
};
#+END_SRC

**** XenoDM/Background-Setup

Because XDM wasn't cutting it...

#+BEGIN_SRC perl :tangle Rexfile
# Installs backgrounds to /usr/local/share/backgrounds
task 'install_backgrounds', sub {
  system( 'doas', 'mkdir', '-p', '/usr/local/share/backgrounds' );
  system( 'doas',  'cp', '-rvf', glob("$USERHOME/.dotfiles/backgrounds/*"), '/usr/local/share/backgrounds' );
};

# Sets up Xenodm configuration
task 'configure_xenodm', sub {
  system( 'doas', 'cp', '-rvf', glob("$USERHOME/.dotfiles/XenoDM-Config/*"), '/etc/X11/xenodm/' );
};
#+END_SRC

**** APMD_AutoHook-Lock

Setup Laptop Slock shell-close autohook

#+BEGIN_SRC perl :tangle Rexfile
task 'configure_apmd', sub {
  system( 'doas', 'mkdir', '/etc/apm' );
  system( 'doas', 'cp', '-rvf', glob("$USERHOME/.dotfiles/APM-Config/*"), '/etc/apm/' );
};
#+END_SRC

**** Extra-Packages

Extra stuff thats not in ports, cargo or base

#+BEGIN_SRC perl :tangle Rexfile
# Compiles shuf re-implementation
task 'compile_shuf', sub {
  system( 'git', 'clone', "$GITHUB/ibara/shuf.git", "$USERHOME/.shuf" );
  chdir "$USERHOME/.shuf";
  system( './configure' );
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my Slock Setup
task 'compile_slock', sub {
  system( 'git', 'clone', "$GITHUB/Izder456/slock.git", "$USERHOME/.slock" );
  chdir "$USERHOME/.slock";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my SURF Setup
task 'compile_surf', sub {
  system( 'git', 'clone', "$GITHUB/Izder456/surf.git", "$USERHOME/.surf-src" );
  chdir "$USERHOME/.surf-src";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles in my ST Setup
task 'compile_st', sub {
  system( 'git', 'clone', "$GITHUB/Izder456/st.git", "$USERHOME/.st" );
  chdir "$USERHOME/.st";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

# Compiles afetch
task 'compile_afetch', sub {
  system( 'git', 'clone', "$GITHUB/13-CF/afetch.git", "$USERHOME/.afetch" );
  chdir "$USERHOME/.afetch";
  system( 'make' );
  system( 'doas', 'make', 'install' );
};

task 'compile_nxbelld', sub {
  $ENV{'AUTOCONF_VERSION'} = "2.69";
  $ENV{'AUTOMAKE_VERSION'} = "1.16";
  system( 'git', 'clone', "$GITHUB/dusxmt/nxbelld.git", "$USERHOME/.nxbelld" );
  chdir "$USERHOME/.nxbelld";
  system('autoreconf -i');
  system( './configure', '--prefix', "$USERHOME/.local");
  system( 'gmake' );
  system( 'gmake', 'install' );
};
#+END_SRC

**** Xdg-UserDirs

Setup Homedir Paths

#+BEGIN_SRC perl :tangle Rexfile
# Updates XDG user directories
task 'update_xdg_user_dirs', sub {
  system( 'xdg-user-dirs-update' );
  system( 'mkdir', "$USERHOME/Projects" );
  system( 'doas', 'gdk-pixbuf-query-loaders', '--update-cache' );
};
#+END_SRC

* Setup Script

please read the [[#disclaimer][DISCLAIMER]], i am not your mom. 

1. Install OpenBSD on a machine with these specs

   #+BEGIN_SRC
  >=42GB Install Disklabel Size (minimum reccomended)
  >=4GB in / (you need this cos /tmp resides here by default, and my icons and gtk themes will clone here during setup)
  >=4GB in /usr (you can get by with 1 single root partiton too, but its probably more ideal to break things up for ramdisk purposes)
  >=24GB in /usr/local (same here as /usr, but even more important)
  4gb or more RAM
  4 logical cores or more
  OpenGL >=3.1 Capable GFX Card
   #+END_SRC

2. Switch to -CURRENT

   #+BEGIN_SRC
  # sysupgrade -sn
   #+END_SRC

3. Add =:doas= group

   #+BEGIN_SRC
  # groupadd doas
  # usermod -G wheel,operator,doas [your username]
   #+END_SRC

4. Add user to staff login class

   #+BEGIN_SRC
  # usermod -L staff [your username]
   #+END_SRC

5. grab my doas and sysctl configs

   #+BEGIN_SRC
   # ftp -o /etc/doas.conf https://github.com/izder456/dotfiles/raw/main/doas.conf
   # ftp -o /etc/sysctl.conf https://github.com/izder456/dotfiles/raw/main/sysctl.conf
   #+END_SRC

6. reboot, let sysupgrade finish, and merge changes:

   #+BEGIN_SRC
   # reboot
   #+END_SRC

   #+BEGIN_SRC
   # sysmerge -d
   #+END_SRC

7. Download and run script as your regular user

   #+BEGIN_SRC
  $ ftp -o /tmp/setup.ksh https://github.com/izder456/dotfiles/raw/main/setup.ksh
  $ ksh /tmp/setup.ksh
   #+END_SRC

8. enable dbus (my StumpWM config needs it)

   #+BEGIN_SRC
   # rcctl enable messagebus
   #+END_SRC

9. Reboot again

   #+BEGIN_SRC
  # reboot
   #+END_SRC
