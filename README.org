* Iz's OpenBSD Dotfiles

- Mainly for personal backups, but if you want them, feel free to use them.

- I won't provide support for any issues on your machine, as this is a pet project.

** Shameless Unixporn for internet points.

#+html: <p align="center"><img width=700 src="assets/XenoDM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/StumpWM.png" /></p>

#+html: <p align="center"><img width=700 src="assets/Emacs.png" /></p>

** Crucial Information

- While /there *is*/ a setup script in this project, =it's not meant to be plug-and-play=. /It's a bare-bones setup/ that is fairly non-portable and will require some tinkering to work perfectly. I don't see this as a problem because I'm comfortable customizing it to my needs.

** Setup
*** InitScript

#+BEGIN_SRC sh :tangle setup.ksh
#!/bin/ksh
echo "We will install p5-rex from ports now!"
echo "Press ENTER to continue:"
read
doas pkg_add p5-Rex git
#+END_SRC

*** PackageLists

These are my packge list files

**** PKGLIST

Ports List

#+BEGIN_SRC :tangle .pkglist
ImageMagick--
adb--
alacritty--
appmanager--
aria2--
armagetronad--
audacity--
autoconf--%2.71
automake--%1.16
avahi--
bash--
bat--
bison--
blockgame--
boehm-gc--
boost--
borgbackup--%1.2
caja--
caja-extensions--
chicken--
clang-tools-extra--
clisp--
clojure--
cmake--
cmatrix--
cmixer--
composer--
coreutils--
cpuid--
curl--
dbus--
deadbeef--
desktop-file-utils--
desmume--
dhewm3--
dolphin--
dunst--
editorconfig-core-c--
ee--
emacs--gtk2%emacs
fceux--
fd--
fdupes--
feh--
ffmpeg--
fftw--
fftw3--
fltk--
fluidsynth--
fmt--
freefont-ttf--
fsharp--
fzf--
g++--%8
gawk--
gcc--%8
gcc-libs--%8
gd--
generaluser-gs-soundfont--
gettext-runtime--
gettext-tools--
gforth--
ggrep--
gimp--%snapshot
git--
github-cli--
glade--
glfw--
glib2--
glslang--
gmake--
gmp--
gnupg--
go--
go-tools--
groff--
gtk+4--
gtk2-murrine-engine--
gtk2mm--
gzdoom--
harfbuzz--
htop--
hw-probe--
i2pd--
iftop--
iniparser--
inkscape--
intltool--
isync--
jack--
jdk--%1.8
jdk--%11
jdk--%17
jq--
json-glib--
lame--
leafpad--
leiningen--
libarchive--
libcanberra--
libcanberra-gtk3--
liberation-fonts--
libevent--
libglade2--
libiconv--
libinotify--
liblo--
libotr--
libpurple--
libqalculate--
libqrencode--
libsamplerate--
libsndfile--
libstatgrab--
libtool--
libusb-compat--
libvorbis--
libyaml--
links--
llvm--%13
llvm--%16
lmms--
lsblk--
lua--%5.4
luajit--
lwjgl--
lwjgl3--
lxappearance--
lynx--
m4--
mercurial--
meson--
mgba--
mgba-qt--
minetest--
moc--
mono--
most--
motif--
mplus-fonts--
mpv--
msmtp--
mu--
musescore--
musikcube--
mxml--
nano--
ncdu--
neofetch--
neovim--
nestopia--
node--
noto-emoji--
noto-nerd-fonts--
nss--
obsdfreqd--
openal--
openmw--
openssl--%1.1
openssl--%3.0
openssl--%3.1
p5-List-MoreUtils--
p5-XML-Parser--
p7zip--
password-store--
pcre--
php--%8.1
picom--
pidgin--
pidgin-libnotify--
pidgin-otr--
pidgin-window-merge--
pkgconf--
pkglocatedb--
portaudio-svn--
portslist--
pv--
py3-isort--
py3-pandas--
py3-pip--
py3-pipx--
py3-pytest-subtests--
py3-test-isort--
python--%3.11
quirks--
qutebrowser--
ripgrep--
rofi--
ruby--%3.2
rust--
sbcl--
screen--shm
screenkey--
scrot--
sdl2--
sdl2-gfx--
sdl2-image--
sdl2-net--
sdl2-pango--
sdl2-ttf--
shared-mime-info--
shellcheck--
shfmt--
sl--
snes9x--
speedtest-cli--
spleen--
ssh-copy-id--
sshfs-fuse--
stumpwm--
subversion--
supertux--
supertuxkart--
surf--
texinfo--
thunderbird--
tidy--
tor--
tree--
ungoogled-chromium--
unifont--
upower--
urlview--slang
vlc--
vulkan-headers--
vulkan-loader--
vulkan-tools--
vulkan-validation-layers--
wget--
wireguard-tools--
xarchiver--
xclip--
xdg-user-dirs--
xdg-utils--
xz--
yt-dlp--
zsh--
#+END_SRC

**** CARGOLIST

Cargo Package List

#+BEGIN_SRC :tangle .cargolist
cargo-update-installed
dust
eza
hyperfine
onefetch
oxipng
sd
tere
tokei
#+END_SRC

*** Rexfile
**** Perl-Boilerplate

Set up +"macros"+ "subroutines" in perl, That I'll use later.

#+BEGIN_SRC perl :tangle Rexfile
use 5.36.0;
use Rex -feature => ['1.4'];

# Set PATH explicitly
$ENV{'PATH'} = '/bin:/usr/bin:/sbin:/usr/sbin:/usr/X11R6/bin:/usr/local/bin:/usr/local/sbin:$HOME/bin';

# convert file contents to a string (thanks tim!)
sub file_to_string {
  open(DATA, "<@_[0]") or die "Can't open @_[0]";
  my @lines = <DATA>;
  close(DATA);
  my $data = join("", @lines);
  $data =~ s/\n/ /g;
  return $data;
}

# Checks if a file exists
sub file_exists {
  my ($filepath) = @_;
  return -e $filepath;
}

# Downloads a file from a given URL
sub download_file {
  my ($url, $filename) = @_;
  my $status = system("ftp -o $filename $url");
  return $status == 0;
}
#+END_SRC

**** Remove-Cruft

I don't need some of these defaults

#+BEGIN_SRC perl :tangle Rexfile
# task to clean home dir
task 'remove_default_cruft', sub {
  unlink(
    "$ENV{HOME}/.cshrc",
    "$ENV{HOME}/.login",
    "$ENV{HOME}/.mailrc",
    "$ENV{HOME}/.profile",
    "$ENV{HOME}/.Xdefaults",
    "$ENV{HOME}/.cvsrc"
  );
  chmod(0700, $ENV{'HOME'});
}
#+END_SRC

**** Clone-Dots

Update, or clone my dotfiles

#+BEGIN_SRC perl :tangle Rexfile
# Updates dotfiles repository or clones if not present
task 'update_or_clone_dotfiles', sub {
  if (-d "$ENV{HOME}/.dotfiles") {
    chdir "$ENV{HOME}/.dotfiles";
    system('git', 'pull', '--recurse-submodules');
  } else {
    system('git', 'clone', '--recurse-submodules', '--depth', '1', 'https://github.com/izder456/dotfiles', "$ENV{HOME}/.dotfiles");
  }
}
#+END_SRC

**** Setup-User

1. Take two params:
  + user
  + pass
2. ensure ~:doas~ group exists
3. make user, using params
4. add user to ~:doas~ group

#+BEGIN_SRC perl :tangle Rexfile
# task to set up doas-capable user with two params (user & pass)
task 'doas-user-setup', sub {
  my $params = shift;
  my $user = $params->{$user};
  my $pass = $params->{$pass};
  # Ensure :doas is present
  group "doas", ensure => "present";
  # Add $user with $pass
  account "$user",
  ensure => "present",
  uid => 1000,
  home => "/home/$user",
  expire => 'never',
  groups => [ 'izder456', 'operator', 'doas', 'staff' ],
  password => "$pass",
  create_home => TRUE;
}
#+END_SRC

**** Package-installation

+ Install ports from [[.pkglist][=.pkglist=]]
+ Install cargo packages from [[.cargolist][=.cargolist=]]

#+BEGIN_SRC perl :tangle Rexfile
# task to install ports from .pkglist
task 'install-ports', sub {
  my $params = shift;
  my $pkgfile = $params->${pkgfile};
  my $pkglist = file_to_string($pkgfile);
  # Install
  pkg [ $pkglist ], ensure => "present";
}

# task to install cargo-packages from .cargolist
task 'install-cargo', sub {
  my $params = shift;
  my $cargofile = $params->${cargofile};
  my $cargolist = file_to_string($cargofile);
  # Install
  system("cargo", "install", "$cargolist");
}
#+END_SRC

**** Dots-Install

+ dfm install script config

#+BEGIN_SRC :tangle .dfminstall
.fonts recurse
.git recurse
.icons recurse
.themes recurse
.moc recurse
.config recurse
.local recurse
assets skip
backgrounds skip
Emacs-Config skip
StumpWM-Config skip
XenoDM-Config skip
APM-Config skip
README.org skip
#+END_SRC

+ dots install

#+BEGIN_SRC perl :tangle Rexfile
# Upgrade/Merge/Install dotfiles
sub update_or_clone_dotfiles {
  if (-d "$ENV{HOME}/.dotfiles") {
    chdir "$ENV{HOME}/.dotfiles";
    system('git', 'pull', '--recurse-submodules');
  } else {
    system('git', 'clone', '--recurse-submodules', '--depth', '1', 'https://github.com/izder456/dotfiles', "$ENV{HOME}/.dotfiles");
  }
}

task 'symlink_dots', sub {
  say "We will install dots now!";
  say "Press ENTER to continue:";
  <STDIN>;
  update_or_clone_dotfiles();
  system('dfm', 'umi');
}
#+END_SRC

**** FiZSH-Setup

This is a zsh frontend, that emulates the functionality of fish

#+BEGIN_SRC perl :tangle Rexfile
# Configures and sets up the default shell
task 'configure_default_shell', sub {
  say "We will install FiZSH now!";
  say "Press ENTER to continue:";
  <STDIN>;
  # Grab openbsd autocompletes
  if (-d "$ENV{HOME}/.zsh-openbsd") {
    system('git', 'pull');
  } else {
    system('git', 'clone', 'https://github.com/sizeofvoid/openbsd-zsh-completions.git', "$ENV{HOME}/.zsh-openbsd");
  }
  # Grab fizsh src setup
  if (-d "$ENV{HOME}/.fizsh") {
    chdir "$ENV{HOME}/.fizsh";
  } else {
    system('git', 'clone', 'https://github.com/zsh-users/fizsh.git', "$ENV{HOME}/.fizsh");
    chdir "$ENV{HOME}/.fizsh";
  }
  system('./configure');
  system('make');
  system('doas', 'make', 'install');
  system('cp', "$ENV{HOME}/.dotfiles/.fizshrc", "$ENV{HOME}/.fizsh/.fizshrc");
  system('chsh', '-s', '/usr/local/bin/fizsh');
}
#+END_SRC

**** Emacs-Setup

I use Emacs, btw

#+BEGIN_SRC perl :tangle Rexfile
# Configures and installs doom emacs
task 'configure_doom_emacs', sub {
  say "We will install Doom-Emacs now!";
  say "Press ENTER to continue:";
  <STDIN>;
  if (-d "$ENV{HOME}/.emacs.d") {
    chdir "$ENV{HOME}/.emacs.d";
  } else {
    system('git', 'clone', '--depth', '1', 'https://github.com/hlissner/doom-emacs.git', "$ENV{HOME}/.emacs.d/");
    chdir "$ENV{HOME}/.emacs.d";
  }
  system("$ENV{HOME}/.emacs.d/bin/doom", 'install', '--config', '--env', '--fonts');
  if (-d "$ENV{HOME}/.doom.d") {
    system('rm', '-rvf', "$ENV{HOME}/.doom.d");
  }
  system('ln', '-sf', '$ENV{HOME}/.dotfiles/Emacs-Config', "$ENV{HOME}/.doom.d");
  system("$ENV{HOME}/.emacs.d/bin/doom", 'sync');
}
#+END_SRC

**** StumpWM-Setup

Yeah, this weird WM...

#+BEGIN_SRC perl :tangle Rexfile
task 'update_or_clone_stumpwm', sub {
  say "We will set up StumpWM now!";
  say "Press ENTER to continue:";
  <STDIN>;
  if (-d "$ENV{HOME}/.stumpwm.d") {
    chdir "$ENV{HOME}/.stumpwm.d";
  } else {
    system('ln', '-sf', '$ENV{HOME}/.dotfiles/StumpWM-Config', '$ENV{HOME}/.stumpwm.d');
  }
}
#+END_SRC

**** XenoDM/Background-Setup

Because XDM wasn't cutting it...

#+BEGIN_SRC perl :tangle Rexfile
# Installs backgrounds to /usr/local/share/backgrounds
task 'install_backgrounds', sub {
  say "We will install backgrounds now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'mkdir', '-p', '/usr/local/share/backgrounds');
  system('doas', 'cp', '-rvf', '$ENV{HOME}/.dotfiles/backgrounds/*', '/usr/local/share/backgrounds');
}

# Sets up Xenodm configuration
task 'setup_xenodm', sub {
  say "We will set up XenoDM now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'cp', '-rvf', '$ENV{HOME}/.dotfiles/config/*', '/etc/X11/xenodm/');
}
#+END_SRC

**** APMD_AutoHook-Lock

Setup Laptop Slock shell-close autohook

#+BEGIN_SRC perl :tangle Rexfile
task 'setup_apmd', sub {
  say "We will set up APM-Autohook now!";
  say "Press ENTER to continue:";
  <STDIN>;
  system('doas', 'mkdir', '/etc/apm');
  system('doas', 'cp', '-rvf', '$ENV{HOME}/.dotfiles/APM-Config/*', '/etc/apm/');
}
#+END_SRC

**** Extra-Packages

Extra stuff thats not in ports, cargo or base

#+BEGIN_SRC perl :tangle Rexfile
# Compiles shuf re-implementation
task 'compile_shuf', sub {
  say "we will compile shuf now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/ibara/shuf.git', "$ENV{HOME}/.shuf");
  chdir "$ENV{HOME}/.shuf";
  system('./configure');
  system('make');
  system('doas', 'make', 'install');
}

# Compiles in my Slock Setup
task 'compile_slock', sub {
  say "we will compile suckless lock now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/Izder456/slock.git', "$ENV{HOME}/.slock");
  chdir "$ENV{HOME}/.slock";
  system('make');
  system('doas', 'make', 'install');
}

# Compiles afetch
task 'compile_afetch', sub {
  say "we will compile afetch now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/13-CF/afetch.git', "$ENV{HOME}/.afetch");
  chdir "$ENV{HOME}/.afetch";
  system('make');
  system('doas', 'make', 'install');
}

# Setup Battery Monitor
task 'setup_battstat', sub {
  say "we will set up battery monitor now!";
  say "press enter to continue:";
  <STDIN>;
  system('git', 'clone', 'https://github.com/imwally/battstat.git', "$ENV{HOME}/.battstat");
  chdir "$ENV{HOME}/.battstat";
  system('doas', 'install', './battstat', '/usr/local/bin');
}
#+END_SRC

**** Xdg-UserDirs


Setup Homedir Paths

#+BEGIN_SRC perl :tangle Rexfile
# Updates XDG user directories
task 'update_xdg_user_dirs', sub {
  say "we will set xdg-user-dirs now!";
  say "press enter to continue:";
  <STDIN>;
  system('xdg-user-dirs-update');
  system('mkdir', '$ENV{HOME}/Projects');
}
#+END_SRC

** Setup Script
*** Do as user:

#+BEGIN_SRC
$ ftp -o ./setup.pl https://github.com/izder456/dotfiles/raw/main/setup.pl
$ chmod +x setup.pl
$ ./setup.pl
#+END_SRC

** Note:

- My script doesn't perform any performance tweaking. Users should refer to [[https://openbsd.org/faq][the FAQ]], [[https://man.openbsd.org][manpages]], or the unofficial [[https://www.openbsdhandbook.com][OpenBSD Handbook]] for that.

- for laptops, I /highly recommend/ solene%'s power management daemon [[https://dataswamp.org/~solene/2022-03-21-openbsd-cool-frequency.html][obsdfreqd]]

- When the script installs dependencies, always choose the latest version when given a version choice from ~pkg_add~, except for Emacs, where you should choose the gtk2 variant.

* DISCLAIMER

- I'm not responsible for any system breakage due to my code.

- If you're unsure, refer to [[LICENSE.txt][THE LICENSE]] to see how seriously I take this.

- Use with caution.
